
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000180 <Reset_Handler>:
 8000180:	b672      	cpsid	i
 8000182:	4825      	ldr	r0, [pc, #148]	; (8000218 <endfiniloop+0x4>)
 8000184:	f380 8809 	msr	PSP, r0
 8000188:	4824      	ldr	r0, [pc, #144]	; (800021c <endfiniloop+0x8>)
 800018a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800018e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000192:	6008      	str	r0, [r1, #0]
 8000194:	2002      	movs	r0, #2
 8000196:	f380 8814 	msr	CONTROL, r0
 800019a:	f3bf 8f6f 	isb	sy
 800019e:	f001 fdcf 	bl	8001d40 <__core_init>
 80001a2:	f001 fced 	bl	8001b80 <__early_init>
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <endfiniloop+0xc>)
 80001a8:	491e      	ldr	r1, [pc, #120]	; (8000224 <endfiniloop+0x10>)
 80001aa:	4a1f      	ldr	r2, [pc, #124]	; (8000228 <endfiniloop+0x14>)

080001ac <msloop>:
 80001ac:	4291      	cmp	r1, r2
 80001ae:	bf3c      	itt	cc
 80001b0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001b4:	e7fa      	bcc.n	80001ac <msloop>
 80001b6:	491d      	ldr	r1, [pc, #116]	; (800022c <endfiniloop+0x18>)
 80001b8:	4a17      	ldr	r2, [pc, #92]	; (8000218 <endfiniloop+0x4>)

080001ba <psloop>:
 80001ba:	4291      	cmp	r1, r2
 80001bc:	bf3c      	itt	cc
 80001be:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c2:	e7fa      	bcc.n	80001ba <psloop>
 80001c4:	491a      	ldr	r1, [pc, #104]	; (8000230 <endfiniloop+0x1c>)
 80001c6:	4a1b      	ldr	r2, [pc, #108]	; (8000234 <endfiniloop+0x20>)
 80001c8:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <endfiniloop+0x24>)

080001ca <dloop>:
 80001ca:	429a      	cmp	r2, r3
 80001cc:	bf3e      	ittt	cc
 80001ce:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001d2:	f842 0b04 	strcc.w	r0, [r2], #4
 80001d6:	e7f8      	bcc.n	80001ca <dloop>
 80001d8:	2000      	movs	r0, #0
 80001da:	4918      	ldr	r1, [pc, #96]	; (800023c <endfiniloop+0x28>)
 80001dc:	4a18      	ldr	r2, [pc, #96]	; (8000240 <endfiniloop+0x2c>)

080001de <bloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <bloop>
 80001e8:	f001 fd6a 	bl	8001cc0 <__init_ram_areas>
 80001ec:	f001 fda0 	bl	8001d30 <__late_init>
 80001f0:	4c14      	ldr	r4, [pc, #80]	; (8000244 <endfiniloop+0x30>)
 80001f2:	4d15      	ldr	r5, [pc, #84]	; (8000248 <endfiniloop+0x34>)

080001f4 <initloop>:
 80001f4:	42ac      	cmp	r4, r5
 80001f6:	da03      	bge.n	8000200 <endinitloop>
 80001f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001fc:	4788      	blx	r1
 80001fe:	e7f9      	b.n	80001f4 <initloop>

08000200 <endinitloop>:
 8000200:	f001 ff7e 	bl	8002100 <main>
 8000204:	4c11      	ldr	r4, [pc, #68]	; (800024c <endfiniloop+0x38>)
 8000206:	4d12      	ldr	r5, [pc, #72]	; (8000250 <endfiniloop+0x3c>)

08000208 <finiloop>:
 8000208:	42ac      	cmp	r4, r5
 800020a:	da03      	bge.n	8000214 <endfiniloop>
 800020c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000210:	4788      	blx	r1
 8000212:	e7f9      	b.n	8000208 <finiloop>

08000214 <endfiniloop>:
 8000214:	f001 bd84 	b.w	8001d20 <__default_exit>
 8000218:	20000800 	.word	0x20000800
 800021c:	08000000 	.word	0x08000000
 8000220:	55555555 	.word	0x55555555
 8000224:	20000000 	.word	0x20000000
 8000228:	20000400 	.word	0x20000400
 800022c:	20000400 	.word	0x20000400
 8000230:	0800337c 	.word	0x0800337c
 8000234:	20000800 	.word	0x20000800
 8000238:	2000086c 	.word	0x2000086c
 800023c:	20000870 	.word	0x20000870
 8000240:	20000cec 	.word	0x20000cec
 8000244:	08000180 	.word	0x08000180
 8000248:	08000180 	.word	0x08000180
 800024c:	08000180 	.word	0x08000180
 8000250:	08000180 	.word	0x08000180

08000254 <_port_switch>:
 8000254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000258:	f8c1 d00c 	str.w	sp, [r1, #12]
 800025c:	68c3      	ldr	r3, [r0, #12]
 800025e:	469d      	mov	sp, r3
 8000260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000264 <_port_thread_start>:
 8000264:	2300      	movs	r3, #0
 8000266:	f383 8811 	msr	BASEPRI, r3
 800026a:	4628      	mov	r0, r5
 800026c:	47a0      	blx	r4
 800026e:	2000      	movs	r0, #0
 8000270:	f001 fcd6 	bl	8001c20 <chThdExit>

08000274 <_port_switch_from_isr>:
 8000274:	f001 fd04 	bl	8001c80 <chSchDoReschedule>

08000278 <_port_exit_from_isr>:
 8000278:	df00      	svc	0
 800027a:	e7fe      	b.n	800027a <_port_exit_from_isr+0x2>

0800027c <__aeabi_drsub>:
 800027c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000280:	e002      	b.n	8000288 <__adddf3>
 8000282:	bf00      	nop

08000284 <__aeabi_dsub>:
 8000284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000288 <__adddf3>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000292:	ea94 0f05 	teq	r4, r5
 8000296:	bf08      	it	eq
 8000298:	ea90 0f02 	teqeq	r0, r2
 800029c:	bf1f      	itttt	ne
 800029e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ae:	f000 80e2 	beq.w	8000476 <__adddf3+0x1ee>
 80002b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ba:	bfb8      	it	lt
 80002bc:	426d      	neglt	r5, r5
 80002be:	dd0c      	ble.n	80002da <__adddf3+0x52>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea80 0202 	eor.w	r2, r0, r2
 80002c6:	ea81 0303 	eor.w	r3, r1, r3
 80002ca:	ea82 0000 	eor.w	r0, r2, r0
 80002ce:	ea83 0101 	eor.w	r1, r3, r1
 80002d2:	ea80 0202 	eor.w	r2, r0, r2
 80002d6:	ea81 0303 	eor.w	r3, r1, r3
 80002da:	2d36      	cmp	r5, #54	; 0x36
 80002dc:	bf88      	it	hi
 80002de:	bd30      	pophi	{r4, r5, pc}
 80002e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f0:	d002      	beq.n	80002f8 <__adddf3+0x70>
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x84>
 8000306:	4252      	negs	r2, r2
 8000308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030c:	ea94 0f05 	teq	r4, r5
 8000310:	f000 80a7 	beq.w	8000462 <__adddf3+0x1da>
 8000314:	f1a4 0401 	sub.w	r4, r4, #1
 8000318:	f1d5 0e20 	rsbs	lr, r5, #32
 800031c:	db0d      	blt.n	800033a <__adddf3+0xb2>
 800031e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000322:	fa22 f205 	lsr.w	r2, r2, r5
 8000326:	1880      	adds	r0, r0, r2
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000330:	1880      	adds	r0, r0, r2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	4159      	adcs	r1, r3
 8000338:	e00e      	b.n	8000358 <__adddf3+0xd0>
 800033a:	f1a5 0520 	sub.w	r5, r5, #32
 800033e:	f10e 0e20 	add.w	lr, lr, #32
 8000342:	2a01      	cmp	r2, #1
 8000344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000348:	bf28      	it	cs
 800034a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	18c0      	adds	r0, r0, r3
 8000354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	d507      	bpl.n	800036e <__adddf3+0xe6>
 800035e:	f04f 0e00 	mov.w	lr, #0
 8000362:	f1dc 0c00 	rsbs	ip, ip, #0
 8000366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036a:	eb6e 0101 	sbc.w	r1, lr, r1
 800036e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000372:	d31b      	bcc.n	80003ac <__adddf3+0x124>
 8000374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000378:	d30c      	bcc.n	8000394 <__adddf3+0x10c>
 800037a:	0849      	lsrs	r1, r1, #1
 800037c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000384:	f104 0401 	add.w	r4, r4, #1
 8000388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800038c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000390:	f080 809a 	bcs.w	80004c8 <__adddf3+0x240>
 8000394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000398:	bf08      	it	eq
 800039a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039e:	f150 0000 	adcs.w	r0, r0, #0
 80003a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a6:	ea41 0105 	orr.w	r1, r1, r5
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b0:	4140      	adcs	r0, r0
 80003b2:	eb41 0101 	adc.w	r1, r1, r1
 80003b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ba:	f1a4 0401 	sub.w	r4, r4, #1
 80003be:	d1e9      	bne.n	8000394 <__adddf3+0x10c>
 80003c0:	f091 0f00 	teq	r1, #0
 80003c4:	bf04      	itt	eq
 80003c6:	4601      	moveq	r1, r0
 80003c8:	2000      	moveq	r0, #0
 80003ca:	fab1 f381 	clz	r3, r1
 80003ce:	bf08      	it	eq
 80003d0:	3320      	addeq	r3, #32
 80003d2:	f1a3 030b 	sub.w	r3, r3, #11
 80003d6:	f1b3 0220 	subs.w	r2, r3, #32
 80003da:	da0c      	bge.n	80003f6 <__adddf3+0x16e>
 80003dc:	320c      	adds	r2, #12
 80003de:	dd08      	ble.n	80003f2 <__adddf3+0x16a>
 80003e0:	f102 0c14 	add.w	ip, r2, #20
 80003e4:	f1c2 020c 	rsb	r2, r2, #12
 80003e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ec:	fa21 f102 	lsr.w	r1, r1, r2
 80003f0:	e00c      	b.n	800040c <__adddf3+0x184>
 80003f2:	f102 0214 	add.w	r2, r2, #20
 80003f6:	bfd8      	it	le
 80003f8:	f1c2 0c20 	rsble	ip, r2, #32
 80003fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000404:	bfdc      	itt	le
 8000406:	ea41 010c 	orrle.w	r1, r1, ip
 800040a:	4090      	lslle	r0, r2
 800040c:	1ae4      	subs	r4, r4, r3
 800040e:	bfa2      	ittt	ge
 8000410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000414:	4329      	orrge	r1, r5
 8000416:	bd30      	popge	{r4, r5, pc}
 8000418:	ea6f 0404 	mvn.w	r4, r4
 800041c:	3c1f      	subs	r4, #31
 800041e:	da1c      	bge.n	800045a <__adddf3+0x1d2>
 8000420:	340c      	adds	r4, #12
 8000422:	dc0e      	bgt.n	8000442 <__adddf3+0x1ba>
 8000424:	f104 0414 	add.w	r4, r4, #20
 8000428:	f1c4 0220 	rsb	r2, r4, #32
 800042c:	fa20 f004 	lsr.w	r0, r0, r4
 8000430:	fa01 f302 	lsl.w	r3, r1, r2
 8000434:	ea40 0003 	orr.w	r0, r0, r3
 8000438:	fa21 f304 	lsr.w	r3, r1, r4
 800043c:	ea45 0103 	orr.w	r1, r5, r3
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f1c4 040c 	rsb	r4, r4, #12
 8000446:	f1c4 0220 	rsb	r2, r4, #32
 800044a:	fa20 f002 	lsr.w	r0, r0, r2
 800044e:	fa01 f304 	lsl.w	r3, r1, r4
 8000452:	ea40 0003 	orr.w	r0, r0, r3
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	fa21 f004 	lsr.w	r0, r1, r4
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f094 0f00 	teq	r4, #0
 8000466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046a:	bf06      	itte	eq
 800046c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000470:	3401      	addeq	r4, #1
 8000472:	3d01      	subne	r5, #1
 8000474:	e74e      	b.n	8000314 <__adddf3+0x8c>
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf18      	it	ne
 800047c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000480:	d029      	beq.n	80004d6 <__adddf3+0x24e>
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	d005      	beq.n	800049a <__adddf3+0x212>
 800048e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000492:	bf04      	itt	eq
 8000494:	4619      	moveq	r1, r3
 8000496:	4610      	moveq	r0, r2
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea91 0f03 	teq	r1, r3
 800049e:	bf1e      	ittt	ne
 80004a0:	2100      	movne	r1, #0
 80004a2:	2000      	movne	r0, #0
 80004a4:	bd30      	popne	{r4, r5, pc}
 80004a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004aa:	d105      	bne.n	80004b8 <__adddf3+0x230>
 80004ac:	0040      	lsls	r0, r0, #1
 80004ae:	4149      	adcs	r1, r1
 80004b0:	bf28      	it	cs
 80004b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004bc:	bf3c      	itt	cc
 80004be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c2:	bd30      	popcc	{r4, r5, pc}
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf1a      	itte	ne
 80004dc:	4619      	movne	r1, r3
 80004de:	4610      	movne	r0, r2
 80004e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e4:	bf1c      	itt	ne
 80004e6:	460b      	movne	r3, r1
 80004e8:	4602      	movne	r2, r0
 80004ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ee:	bf06      	itte	eq
 80004f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f4:	ea91 0f03 	teqeq	r1, r3
 80004f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	bf00      	nop

08000500 <__aeabi_ui2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f04f 0500 	mov.w	r5, #0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e750      	b.n	80003c0 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_i2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000538:	bf48      	it	mi
 800053a:	4240      	negmi	r0, r0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e73e      	b.n	80003c0 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_f2d>:
 8000544:	0042      	lsls	r2, r0, #1
 8000546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054a:	ea4f 0131 	mov.w	r1, r1, rrx
 800054e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000552:	bf1f      	itttt	ne
 8000554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800055c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000560:	4770      	bxne	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	bf14      	ite	ne
 8000568:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e720      	b.n	80003c0 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aedc 	beq.w	800036e <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6c1      	b.n	800036e <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2iz>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a18:	d215      	bcs.n	8000a46 <__aeabi_d2iz+0x36>
 8000a1a:	d511      	bpl.n	8000a40 <__aeabi_d2iz+0x30>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d912      	bls.n	8000a4c <__aeabi_d2iz+0x3c>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	bf18      	it	ne
 8000a3c:	4240      	negne	r0, r0
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_d2iz+0x48>
 8000a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	bf08      	it	eq
 8000a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__gesf2>:
 8000b00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b04:	e006      	b.n	8000b14 <__cmpsf2+0x4>
 8000b06:	bf00      	nop

08000b08 <__lesf2>:
 8000b08:	f04f 0c01 	mov.w	ip, #1
 8000b0c:	e002      	b.n	8000b14 <__cmpsf2+0x4>
 8000b0e:	bf00      	nop

08000b10 <__cmpsf2>:
 8000b10:	f04f 0c01 	mov.w	ip, #1
 8000b14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b24:	bf18      	it	ne
 8000b26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2a:	d011      	beq.n	8000b50 <__cmpsf2+0x40>
 8000b2c:	b001      	add	sp, #4
 8000b2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b32:	bf18      	it	ne
 8000b34:	ea90 0f01 	teqne	r0, r1
 8000b38:	bf58      	it	pl
 8000b3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b3e:	bf88      	it	hi
 8000b40:	17c8      	asrhi	r0, r1, #31
 8000b42:	bf38      	it	cc
 8000b44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b48:	bf18      	it	ne
 8000b4a:	f040 0001 	orrne.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	d102      	bne.n	8000b5c <__cmpsf2+0x4c>
 8000b56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b5a:	d105      	bne.n	8000b68 <__cmpsf2+0x58>
 8000b5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b60:	d1e4      	bne.n	8000b2c <__cmpsf2+0x1c>
 8000b62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b66:	d0e1      	beq.n	8000b2c <__cmpsf2+0x1c>
 8000b68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cfrcmple>:
 8000b70:	4684      	mov	ip, r0
 8000b72:	4608      	mov	r0, r1
 8000b74:	4661      	mov	r1, ip
 8000b76:	e7ff      	b.n	8000b78 <__aeabi_cfcmpeq>

08000b78 <__aeabi_cfcmpeq>:
 8000b78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b7a:	f7ff ffc9 	bl	8000b10 <__cmpsf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b88 <__aeabi_fcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cfcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_fcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cfcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cfcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffd2 	bl	8000b70 <__aeabi_cfrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc8 	bl	8000b70 <__aeabi_cfrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_f2iz>:
 8000bec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf4:	d30f      	bcc.n	8000c16 <__aeabi_f2iz+0x2a>
 8000bf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_f2iz+0x30>
 8000c00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c10:	bf18      	it	ne
 8000c12:	4240      	negne	r0, r0
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr
 8000c1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c20:	d101      	bne.n	8000c26 <__aeabi_f2iz+0x3a>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	d105      	bne.n	8000c32 <__aeabi_f2iz+0x46>
 8000c26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
	...

08000c40 <wakeup.4670.4156>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000c40:	b410      	push	{r4}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000c42:	2320      	movs	r3, #32
 8000c44:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000c48:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	d80e      	bhi.n	8000c6e <wakeup.4670.4156+0x2e>
 8000c50:	e8df f003 	tbb	[pc, r3]
 8000c54:	270d0d2b 	.word	0x270d0d2b
 8000c58:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8000c5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	3201      	adds	r2, #1
 8000c62:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000c64:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000c68:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000c6a:	6802      	ldr	r2, [r0, #0]
 8000c6c:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000c6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000c72:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000c74:	f640 230c 	movw	r3, #2572	; 0xa0c
 8000c78:	6881      	ldr	r1, [r0, #8]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000c7a:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000c7c:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
  do {
    cp = cp->queue.next;
 8000c84:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	d2fb      	bcs.n	8000c84 <wakeup.4670.4156+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000c90:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000c92:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000c94:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000c96:	6058      	str	r0, [r3, #4]
 8000c98:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca0:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8000ca2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7e1      	b.n	8000c6e <wakeup.4670.4156+0x2e>
 8000caa:	2300      	movs	r3, #0
 8000cac:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	f3af 8000 	nop.w

08000cc0 <pwmc2cb.11502>:
}

static void pwmc2cb(PWMDriver *pwmp) {

	(void)pwmp;
	palClearPad(GPIOA, 10); // pareja de 14
 8000cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	4770      	bx	lr

08000cd0 <pwmp2cb.11499>:
};

static void pwmp2cb(PWMDriver *pwmp) {

	(void)pwmp;
	palSetPad(GPIOA, 10); // pareja de 14
 8000cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	4770      	bx	lr

08000ce0 <pwmc1cb.11496>:

static void pwmc1cb(PWMDriver *pwmp) {

	(void)pwmp;
	//palClearPad(GPIOD, 2);
	palClearPad(GPIOA, 8); // pareja de 10
 8000ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ce4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4770      	bx	lr

08000cf0 <pwmpcb.11493>:

static void pwmpcb(PWMDriver *pwmp) {

	(void)pwmp;
	//palSetPad(GPIOD, 2);
	palSetPad(GPIOA, 8); // pareja de 10
 8000cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cf4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	4770      	bx	lr

08000d00 <long_to_string_with_divisor.11139.4483>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8000d00:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf08      	it	eq
 8000d06:	460b      	moveq	r3, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8000d08:	f100 070b 	add.w	r7, r0, #11
 8000d0c:	f100 050a 	add.w	r5, r0, #10
  do {
    i = (int)(l % radix);
 8000d10:	fbb1 f6f2 	udiv	r6, r1, r2
 8000d14:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8000d18:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 8000d1c:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8000d1e:	bfc8      	it	gt
 8000d20:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8000d24:	b2e4      	uxtb	r4, r4
    l /= radix;
  } while ((ll /= radix) != 0);
 8000d26:	fbb3 f3f2 	udiv	r3, r3, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8000d2a:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8000d2c:	462e      	mov	r6, r5
 8000d2e:	f805 4901 	strb.w	r4, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1ec      	bne.n	8000d10 <long_to_string_with_divisor.11139.4483+0x10>

  i = (int)(p + MAX_FILLER - q);
 8000d36:	1bba      	subs	r2, r7, r6
 8000d38:	4633      	mov	r3, r6
 8000d3a:	4402      	add	r2, r0
 8000d3c:	e001      	b.n	8000d42 <long_to_string_with_divisor.11139.4483+0x42>
 8000d3e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  do
    *p++ = *q++;
 8000d42:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d1f9      	bne.n	8000d3e <long_to_string_with_divisor.11139.4483+0x3e>

  return p;
}
 8000d4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <notify3.8479>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8000d50:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000d54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	f3af 8000 	nop.w
 8000d68:	f3af 8000 	nop.w
 8000d6c:	f3af 8000 	nop.w

08000d70 <notify2.8482>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000d70:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000d74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	f3af 8000 	nop.w
 8000d88:	f3af 8000 	nop.w
 8000d8c:	f3af 8000 	nop.w

08000d90 <notify1.8485>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000d90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	f3af 8000 	nop.w
 8000dac:	f3af 8000 	nop.w

08000db0 <pwm_lld_serve_interrupt.4504>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8000db0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000db2:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8000db4:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000db6:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000db8:	68dc      	ldr	r4, [r3, #12]
 8000dba:	4014      	ands	r4, r2
 8000dbc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8000dbe:	43d2      	mvns	r2, r2
 8000dc0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000dc2:	07a3      	lsls	r3, r4, #30
 8000dc4:	d503      	bpl.n	8000dce <pwm_lld_serve_interrupt.4504+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8000dc6:	6843      	ldr	r3, [r0, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000dca:	b103      	cbz	r3, 8000dce <pwm_lld_serve_interrupt.4504+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 8000dcc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000dce:	0760      	lsls	r0, r4, #29
 8000dd0:	d504      	bpl.n	8000ddc <pwm_lld_serve_interrupt.4504+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8000dd2:	686b      	ldr	r3, [r5, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000dd6:	b10b      	cbz	r3, 8000ddc <pwm_lld_serve_interrupt.4504+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8000dd8:	4628      	mov	r0, r5
 8000dda:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000ddc:	0721      	lsls	r1, r4, #28
 8000dde:	d504      	bpl.n	8000dea <pwm_lld_serve_interrupt.4504+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8000de0:	686b      	ldr	r3, [r5, #4]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000de4:	b10b      	cbz	r3, 8000dea <pwm_lld_serve_interrupt.4504+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8000de6:	4628      	mov	r0, r5
 8000de8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000dea:	06e2      	lsls	r2, r4, #27
 8000dec:	d504      	bpl.n	8000df8 <pwm_lld_serve_interrupt.4504+0x48>
      (pwmp->config->channels[3].callback != NULL))
 8000dee:	686b      	ldr	r3, [r5, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000df2:	b10b      	cbz	r3, 8000df8 <pwm_lld_serve_interrupt.4504+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8000df4:	4628      	mov	r0, r5
 8000df6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8000df8:	07e3      	lsls	r3, r4, #31
 8000dfa:	d504      	bpl.n	8000e06 <pwm_lld_serve_interrupt.4504+0x56>
 8000dfc:	686b      	ldr	r3, [r5, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	b10b      	cbz	r3, 8000e06 <pwm_lld_serve_interrupt.4504+0x56>
    pwmp->config->callback(pwmp);
 8000e02:	4628      	mov	r0, r5
 8000e04:	4798      	blx	r3
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	f3af 8000 	nop.w
 8000e0c:	f3af 8000 	nop.w

08000e10 <_port_irq_epilogue.4532>:
 8000e10:	2320      	movs	r3, #32
 8000e12:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000e16:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000e1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000e24:	d102      	bne.n	8000e2c <_port_irq_epilogue.4532+0x1c>
 8000e26:	f383 8811 	msr	BASEPRI, r3
 8000e2a:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000e2c:	f3ef 8209 	mrs	r2, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e34:	f842 3c04 	str.w	r3, [r2, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000e38:	f1a2 0320 	sub.w	r3, r2, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000e3c:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000e40:	f640 230c 	movw	r3, #2572	; 0xa0c
 8000e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e48:	6819      	ldr	r1, [r3, #0]
  tprio_t p2 = currp->prio;
 8000e4a:	699b      	ldr	r3, [r3, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000e4c:	6889      	ldr	r1, [r1, #8]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4299      	cmp	r1, r3
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000e52:	bf8b      	itete	hi
 8000e54:	f240 2375 	movwhi	r3, #629	; 0x275
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000e58:	f240 2378 	movwls	r3, #632	; 0x278

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000e5c:	f6c0 0300 	movthi	r3, #2048	; 0x800
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000e60:	f6c0 0300 	movtls	r3, #2048	; 0x800
 8000e64:	f842 3c08 	str.w	r3, [r2, #-8]
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w

08000e70 <VectorB0.4212>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e74:	691a      	ldr	r2, [r3, #16]
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000e7a:	0792      	lsls	r2, r2, #30
 8000e7c:	d403      	bmi.n	8000e86 <VectorB0.4212+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000e82:	f7ff bfc5 	b.w	8000e10 <_port_irq_epilogue.4532>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000e90:	f640 240c 	movw	r4, #2572	; 0xa0c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000e94:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000e98:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000e9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000e9e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000ea0:	69e3      	ldr	r3, [r4, #28]
 8000ea2:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000ea4:	1a16      	subs	r6, r2, r0
 8000ea6:	8919      	ldrh	r1, [r3, #8]
 8000ea8:	b2b6      	uxth	r6, r6
 8000eaa:	428e      	cmp	r6, r1
 8000eac:	f104 071c 	add.w	r7, r4, #28
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8000eb0:	bf24      	itt	cs
 8000eb2:	f04f 0800 	movcs.w	r8, #0
 8000eb6:	2620      	movcs	r6, #32

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000eb8:	d31c      	bcc.n	8000ef4 <VectorB0.4212+0x84>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000eba:	681a      	ldr	r2, [r3, #0]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8000ebc:	4401      	add	r1, r0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000ebe:	42ba      	cmp	r2, r7
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8000ec0:	84e1      	strh	r1, [r4, #38]	; 0x26

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8000ec2:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000ec4:	6057      	str	r7, [r2, #4]
    ch.vtlist.next = vtp->next;
 8000ec6:	61e2      	str	r2, [r4, #28]
    fn = vtp->func;
    vtp->func = NULL;
 8000ec8:	f8c3 800c 	str.w	r8, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000ecc:	bf08      	it	eq
 8000ece:	f8c5 800c 	streq.w	r8, [r5, #12]
 8000ed2:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000ed6:	6918      	ldr	r0, [r3, #16]
 8000ed8:	4788      	blx	r1
 8000eda:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000ede:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000ee0:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8000ee2:	69e3      	ldr	r3, [r4, #28]
 8000ee4:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000ee6:	ebc0 0c02 	rsb	ip, r0, r2
 8000eea:	8919      	ldrh	r1, [r3, #8]
 8000eec:	fa1f fc8c 	uxth.w	ip, ip
 8000ef0:	4561      	cmp	r1, ip
 8000ef2:	d9e2      	bls.n	8000eba <VectorB0.4212+0x4a>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000ef4:	42bb      	cmp	r3, r7
 8000ef6:	d00a      	beq.n	8000f0e <VectorB0.4212+0x9e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 8000ef8:	4401      	add	r1, r0
 8000efa:	1a89      	subs	r1, r1, r2
 8000efc:	b289      	uxth	r1, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000efe:	2901      	cmp	r1, #1
 8000f00:	bf98      	it	ls
 8000f02:	2102      	movls	r1, #2
  }
  port_timer_set_alarm(now + delta);
 8000f04:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f06:	b292      	uxth	r2, r2
 8000f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000f18:	f7ff bf7a 	b.w	8000e10 <_port_irq_epilogue.4532>
 8000f1c:	f3af 8000 	nop.w

08000f20 <VectorB4.4498>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8000f20:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);
 8000f22:	f640 2098 	movw	r0, #2712	; 0xa98
 8000f26:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f2a:	f7ff ff41 	bl	8000db0 <pwm_lld_serve_interrupt.4504>

  OSAL_IRQ_EPILOGUE();
}
 8000f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);

  OSAL_IRQ_EPILOGUE();
 8000f32:	f7ff bf6d 	b.w	8000e10 <_port_irq_epilogue.4532>
 8000f36:	bf00      	nop
 8000f38:	f3af 8000 	nop.w
 8000f3c:	f3af 8000 	nop.w

08000f40 <VectorAC.4500>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8000f40:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 8000f42:	f640 207c 	movw	r0, #2684	; 0xa7c
 8000f46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f4a:	f7ff ff31 	bl	8000db0 <pwm_lld_serve_interrupt.4504>

  OSAL_IRQ_EPILOGUE();
}
 8000f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8000f52:	f7ff bf5d 	b.w	8000e10 <_port_irq_epilogue.4532>
 8000f56:	bf00      	nop
 8000f58:	f3af 8000 	nop.w
 8000f5c:	f3af 8000 	nop.w

08000f60 <VectorA4.4502>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000f60:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 8000f62:	f640 207c 	movw	r0, #2684	; 0xa7c
 8000f66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f6a:	f7ff ff21 	bl	8000db0 <pwm_lld_serve_interrupt.4504>

  OSAL_IRQ_EPILOGUE();
}
 8000f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8000f72:	f7ff bf4d 	b.w	8000e10 <_port_irq_epilogue.4532>
 8000f76:	bf00      	nop
 8000f78:	f3af 8000 	nop.w
 8000f7c:	f3af 8000 	nop.w

08000f80 <SVC_Handler.4542>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f80:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000f84:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f86:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f383 8811 	msr	BASEPRI, r3
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	f3af 8000 	nop.w
 8000f98:	f3af 8000 	nop.w
 8000f9c:	f3af 8000 	nop.w

08000fa0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000fa0:	b430      	push	{r4, r5}
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000fa8:	f640 23b4 	movw	r3, #2740	; 0xab4
 8000fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fb0:	681d      	ldr	r5, [r3, #0]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8000fb2:	1e4c      	subs	r4, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000fb4:	442a      	add	r2, r5
 8000fb6:	4422      	add	r2, r4
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8000fb8:	4249      	negs	r1, r1
 8000fba:	4404      	add	r4, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000fbc:	ea02 0001 	and.w	r0, r2, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8000fc0:	4021      	ands	r1, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000fc2:	685a      	ldr	r2, [r3, #4]
  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
 8000fc4:	4401      	add	r1, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000fc6:	4291      	cmp	r1, r2
 8000fc8:	d807      	bhi.n	8000fda <chCoreAllocAlignedWithOffset+0x3a>
 8000fca:	428d      	cmp	r5, r1
 8000fcc:	d805      	bhi.n	8000fda <chCoreAllocAlignedWithOffset+0x3a>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8000fce:	6019      	str	r1, [r3, #0]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000fd6:	bc30      	pop	{r4, r5}
 8000fd8:	4770      	bx	lr
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
 8000fda:	2000      	movs	r0, #0
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000fe2:	bc30      	pop	{r4, r5}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	f3af 8000 	nop.w
 8000fec:	f3af 8000 	nop.w

08000ff0 <chSchReadyI.4561>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000ff0:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000ff2:	f640 230c 	movw	r3, #2572	; 0xa0c
 8000ff6:	6881      	ldr	r1, [r0, #8]
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000ff8:	b410      	push	{r4}
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 8000ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000ffe:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001000:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8001004:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	428a      	cmp	r2, r1
 800100a:	d2fb      	bcs.n	8001004 <chSchReadyI.4561+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800100c:	685a      	ldr	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 800100e:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001010:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8001012:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8001014:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001016:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <chEvtBroadcastFlagsI.4550>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001022:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001024:	4607      	mov	r7, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001026:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001028:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800102a:	d020      	beq.n	800106e <chEvtBroadcastFlagsI.4550+0x4e>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800102c:	2600      	movs	r6, #0
 800102e:	e002      	b.n	8001036 <chEvtBroadcastFlagsI.4550+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8001030:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001032:	42a7      	cmp	r7, r4
 8001034:	d01b      	beq.n	800106e <chEvtBroadcastFlagsI.4550+0x4e>
  /*lint -restore*/
    elp->flags |= flags;
 8001036:	68e3      	ldr	r3, [r4, #12]
 8001038:	432b      	orrs	r3, r5
 800103a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800103c:	b115      	cbz	r5, 8001044 <chEvtBroadcastFlagsI.4550+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 800103e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001040:	4213      	tst	r3, r2
 8001042:	d0f5      	beq.n	8001030 <chEvtBroadcastFlagsI.4550+0x10>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 8001044:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8001046:	68a2      	ldr	r2, [r4, #8]
 8001048:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 800104a:	f890 3020 	ldrb.w	r3, [r0, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 800104e:	430a      	orrs	r2, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001050:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8001052:	6342      	str	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001054:	d00c      	beq.n	8001070 <chEvtBroadcastFlagsI.4550+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001056:	2b0b      	cmp	r3, #11
 8001058:	d1ea      	bne.n	8001030 <chEvtBroadcastFlagsI.4550+0x10>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800105a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800105c:	401a      	ands	r2, r3

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 800105e:	4293      	cmp	r3, r2
 8001060:	d1e6      	bne.n	8001030 <chEvtBroadcastFlagsI.4550+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8001062:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001064:	f7ff ffc4 	bl	8000ff0 <chSchReadyI.4561>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8001068:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800106a:	42a7      	cmp	r7, r4
 800106c:	d1e3      	bne.n	8001036 <chEvtBroadcastFlagsI.4550+0x16>
 800106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001070:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001072:	421a      	tst	r2, r3
 8001074:	d0dc      	beq.n	8001030 <chEvtBroadcastFlagsI.4550+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8001076:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001078:	f7ff ffba 	bl	8000ff0 <chSchReadyI.4561>
 800107c:	e7f4      	b.n	8001068 <chEvtBroadcastFlagsI.4550+0x48>
 800107e:	bf00      	nop

08001080 <serve_interrupt.8496.4189>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8001084:	6f46      	ldr	r6, [r0, #116]	; 0x74
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8001086:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
 8001088:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 800108c:	6833      	ldr	r3, [r6, #0]
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 800108e:	4605      	mov	r5, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001090:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8001092:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001094:	f100 8089 	bmi.w	80011aa <serve_interrupt.8496.4189+0x12a>
 8001098:	2320      	movs	r3, #32
 800109a:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800109e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80010a2:	d050      	beq.n	8001146 <serve_interrupt.8496.4189+0xc6>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 80010a4:	f105 0804 	add.w	r8, r5, #4
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
  }

  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 80010a8:	f105 070c 	add.w	r7, r5, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80010ac:	f04f 0900 	mov.w	r9, #0
 80010b0:	e009      	b.n	80010c6 <serve_interrupt.8496.4189+0x46>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 80010b2:	06a4      	lsls	r4, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 80010b4:	6873      	ldr	r3, [r6, #4]
 80010b6:	f895 b078 	ldrb.w	fp, [r5, #120]	; 0x78
    if (sr & USART_SR_RXNE)
 80010ba:	d41f      	bmi.n	80010fc <serve_interrupt.8496.4189+0x7c>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80010bc:	6834      	ldr	r4, [r6, #0]
 80010be:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80010c0:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80010c4:	d03f      	beq.n	8001146 <serve_interrupt.8496.4189+0xc6>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80010c6:	0723      	lsls	r3, r4, #28
 80010c8:	d0f3      	beq.n	80010b2 <serve_interrupt.8496.4189+0x32>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;
 80010ca:	f014 0f08 	tst.w	r4, #8
 80010ce:	bf14      	ite	ne
 80010d0:	2180      	movne	r1, #128	; 0x80
 80010d2:	2100      	moveq	r1, #0

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
  if (sr & USART_SR_PE)
 80010d4:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80010d6:	bf48      	it	mi
 80010d8:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80010dc:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80010de:	bf48      	it	mi
 80010e0:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80010e4:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80010e6:	bf48      	it	mi
 80010e8:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80010ec:	4640      	mov	r0, r8
 80010ee:	f7ff ff97 	bl	8001020 <chEvtBroadcastFlagsI.4550>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 80010f2:	06a4      	lsls	r4, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 80010f4:	6873      	ldr	r3, [r6, #4]
 80010f6:	f895 b078 	ldrb.w	fp, [r5, #120]	; 0x78
    if (sr & USART_SR_RXNE)
 80010fa:	d5df      	bpl.n	80010bc <serve_interrupt.8496.4189+0x3c>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80010fc:	696a      	ldr	r2, [r5, #20]
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d040      	beq.n	8001184 <serve_interrupt.8496.4189+0x104>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8001102:	6a2a      	ldr	r2, [r5, #32]
 8001104:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001106:	428a      	cmp	r2, r1
 8001108:	d046      	beq.n	8001198 <serve_interrupt.8496.4189+0x118>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 800110a:	6968      	ldr	r0, [r5, #20]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 800110c:	ea0b 0303 	and.w	r3, fp, r3
  *iqp->q_wrptr++ = b;
 8001110:	1c51      	adds	r1, r2, #1

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8001112:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8001114:	6229      	str	r1, [r5, #32]

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8001116:	6168      	str	r0, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001118:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800111a:	6a2a      	ldr	r2, [r5, #32]
 800111c:	69eb      	ldr	r3, [r5, #28]
 800111e:	429a      	cmp	r2, r3
 8001120:	d301      	bcc.n	8001126 <serve_interrupt.8496.4189+0xa6>
    iqp->q_wrptr = iqp->q_buffer;
 8001122:	69ab      	ldr	r3, [r5, #24]
 8001124:	622b      	str	r3, [r5, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001126:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001128:	429f      	cmp	r7, r3
 800112a:	d0c7      	beq.n	80010bc <serve_interrupt.8496.4189+0x3c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800112c:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 800112e:	4618      	mov	r0, r3
 8001130:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001132:	6057      	str	r7, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001134:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001138:	f7ff ff5a 	bl	8000ff0 <chSchReadyI.4561>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800113c:	6834      	ldr	r4, [r6, #0]
 800113e:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001140:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001144:	d1bf      	bne.n	80010c6 <serve_interrupt.8496.4189+0x46>
 8001146:	2300      	movs	r3, #0
 8001148:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800114c:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001150:	d001      	beq.n	8001156 <serve_interrupt.8496.4189+0xd6>
 8001152:	0620      	lsls	r0, r4, #24
 8001154:	d438      	bmi.n	80011c8 <serve_interrupt.8496.4189+0x148>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8001156:	0661      	lsls	r1, r4, #25
 8001158:	d511      	bpl.n	800117e <serve_interrupt.8496.4189+0xfe>
 800115a:	2320      	movs	r3, #32
 800115c:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8001160:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001162:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001164:	429a      	cmp	r2, r3
 8001166:	d055      	beq.n	8001214 <serve_interrupt.8496.4189+0x194>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001168:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800116c:	ea0a 0303 	and.w	r3, sl, r3
    u->SR = ~USART_SR_TC;
 8001170:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001174:	60f3      	str	r3, [r6, #12]
 8001176:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001178:	6032      	str	r2, [r6, #0]
 800117a:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }
}
 800117e:	b003      	add	sp, #12
 8001180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001184:	2104      	movs	r1, #4
 8001186:	4640      	mov	r0, r8
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f7ff ff49 	bl	8001020 <chEvtBroadcastFlagsI.4550>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 800118e:	6a2a      	ldr	r2, [r5, #32]
 8001190:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001192:	9b01      	ldr	r3, [sp, #4]
 8001194:	428a      	cmp	r2, r1
 8001196:	d1b8      	bne.n	800110a <serve_interrupt.8496.4189+0x8a>
 8001198:	6969      	ldr	r1, [r5, #20]
 800119a:	2900      	cmp	r1, #0
 800119c:	d0b5      	beq.n	800110a <serve_interrupt.8496.4189+0x8a>
 800119e:	4640      	mov	r0, r8
 80011a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a4:	f7ff ff3c 	bl	8001020 <chEvtBroadcastFlagsI.4550>
 80011a8:	e788      	b.n	80010bc <serve_interrupt.8496.4189+0x3c>
 80011aa:	2320      	movs	r3, #32
 80011ac:	f383 8811 	msr	BASEPRI, r3
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	3004      	adds	r0, #4
 80011b6:	f7ff ff33 	bl	8001020 <chEvtBroadcastFlagsI.4550>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 80011ba:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80011be:	6033      	str	r3, [r6, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	f383 8811 	msr	BASEPRI, r3
 80011c6:	e767      	b.n	8001098 <serve_interrupt.8496.4189+0x18>
 80011c8:	2320      	movs	r3, #32
 80011ca:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 80011ce:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80011d0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d026      	beq.n	8001224 <serve_interrupt.8496.4189+0x1a4>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 80011d6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80011d8:	6c29      	ldr	r1, [r5, #64]	; 0x40
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80011da:	1c5a      	adds	r2, r3, #1

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 80011dc:	3001      	adds	r0, #1
 80011de:	63a8      	str	r0, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80011e0:	64aa      	str	r2, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80011e2:	428a      	cmp	r2, r1
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80011e4:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80011e6:	d301      	bcc.n	80011ec <serve_interrupt.8496.4189+0x16c>
    oqp->q_rdptr = oqp->q_buffer;
 80011e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80011ea:	64ab      	str	r3, [r5, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80011ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }

  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 80011ee:	f105 0230 	add.w	r2, r5, #48	; 0x30
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d009      	beq.n	800120a <serve_interrupt.8496.4189+0x18a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80011f6:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80011f8:	f04f 0e00 	mov.w	lr, #0
 80011fc:	6329      	str	r1, [r5, #48]	; 0x30
  (void) chSchReadyI(tp);
 80011fe:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8001200:	604a      	str	r2, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001202:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001206:	f7ff fef3 	bl	8000ff0 <chSchReadyI.4561>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800120a:	6077      	str	r7, [r6, #4]
 800120c:	2300      	movs	r3, #0
 800120e:	f383 8811 	msr	BASEPRI, r3
 8001212:	e7a0      	b.n	8001156 <serve_interrupt.8496.4189+0xd6>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8001214:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0a6      	beq.n	8001168 <serve_interrupt.8496.4189+0xe8>
 800121a:	1d28      	adds	r0, r5, #4
 800121c:	2110      	movs	r1, #16
 800121e:	f7ff feff 	bl	8001020 <chEvtBroadcastFlagsI.4550>
 8001222:	e7a1      	b.n	8001168 <serve_interrupt.8496.4189+0xe8>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8001224:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001226:	2a00      	cmp	r2, #0
 8001228:	d0d5      	beq.n	80011d6 <serve_interrupt.8496.4189+0x156>
 800122a:	1d28      	adds	r0, r5, #4
 800122c:	2108      	movs	r1, #8
 800122e:	f7ff fef7 	bl	8001020 <chEvtBroadcastFlagsI.4550>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001232:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001236:	ea0a 0303 	and.w	r3, sl, r3
 800123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123e:	60f3      	str	r3, [r6, #12]
 8001240:	e7e4      	b.n	800120c <serve_interrupt.8496.4189+0x18c>
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	f3af 8000 	nop.w
 800124c:	f3af 8000 	nop.w

08001250 <VectorDC.4182>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8001250:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);
 8001252:	f640 106c 	movw	r0, #2412	; 0x96c
 8001256:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800125a:	f7ff ff11 	bl	8001080 <serve_interrupt.8496.4189>

  OSAL_IRQ_EPILOGUE();
}
 800125e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 8001262:	f7ff bdd5 	b.w	8000e10 <_port_irq_epilogue.4532>
 8001266:	bf00      	nop
 8001268:	f3af 8000 	nop.w
 800126c:	f3af 8000 	nop.w

08001270 <VectorD8.4185>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001270:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 8001272:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001276:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800127a:	f7ff ff01 	bl	8001080 <serve_interrupt.8496.4189>

  OSAL_IRQ_EPILOGUE();
}
 800127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8001282:	f7ff bdc5 	b.w	8000e10 <_port_irq_epilogue.4532>
 8001286:	bf00      	nop
 8001288:	f3af 8000 	nop.w
 800128c:	f3af 8000 	nop.w

08001290 <VectorD4.4187>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001290:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 8001292:	f640 0074 	movw	r0, #2164	; 0x874
 8001296:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800129a:	f7ff fef1 	bl	8001080 <serve_interrupt.8496.4189>

  OSAL_IRQ_EPILOGUE();
}
 800129e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80012a2:	f7ff bdb5 	b.w	8000e10 <_port_irq_epilogue.4532>
 80012a6:	bf00      	nop
 80012a8:	f3af 8000 	nop.w
 80012ac:	f3af 8000 	nop.w

080012b0 <_idle_thread.4314>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80012b0:	e7fe      	b.n	80012b0 <_idle_thread.4314>
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	f3af 8000 	nop.w
 80012bc:	f3af 8000 	nop.w

080012c0 <BusFault_Handler.4573>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 80012c0:	e7fe      	b.n	80012c0 <BusFault_Handler.4573>
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	f3af 8000 	nop.w
 80012cc:	f3af 8000 	nop.w

080012d0 <chSchGoSleepS.4558>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 80012d0:	f640 230c 	movw	r3, #2572	; 0xa0c
 80012d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80012d8:	b430      	push	{r4, r5}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 80012da:	681a      	ldr	r2, [r3, #0]
  thread_t *otp = currp;
 80012dc:	6999      	ldr	r1, [r3, #24]

  tqp->next             = tp->queue.next;
 80012de:	6814      	ldr	r4, [r2, #0]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80012e0:	2501      	movs	r5, #1
  thread_t *otp = currp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 80012e2:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 80012e6:	6063      	str	r3, [r4, #4]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80012e8:	f882 5020 	strb.w	r5, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80012ec:	601c      	str	r4, [r3, #0]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80012ee:	4610      	mov	r0, r2
}
 80012f0:	bc30      	pop	{r4, r5}
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80012f2:	619a      	str	r2, [r3, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80012f4:	f7fe bfae 	b.w	8000254 <_port_switch>
 80012f8:	f3af 8000 	nop.w
 80012fc:	f3af 8000 	nop.w

08001300 <chSchGoSleepTimeoutS.4364>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001306:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001308:	b087      	sub	sp, #28
 800130a:	4607      	mov	r7, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800130c:	d060      	beq.n	80013d0 <chSchGoSleepTimeoutS.4364+0xd0>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800130e:	f640 240c 	movw	r4, #2572	; 0xa0c
 8001312:	f2c2 0400 	movt	r4, #8192	; 0x2000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001316:	4625      	mov	r5, r4
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001318:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800131c:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 8001320:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8001324:	f640 4241 	movw	r2, #3137	; 0xc41
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001328:	69a6      	ldr	r6, [r4, #24]
  vtp->func = vtfunc;
 800132a:	f6c0 0200 	movt	r2, #2048	; 0x800
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800132e:	2901      	cmp	r1, #1
 8001330:	bf98      	it	ls
 8001332:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001334:	42ab      	cmp	r3, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001336:	9605      	str	r6, [sp, #20]
 8001338:	fa1f fc8c 	uxth.w	ip, ip
  vtp->func = vtfunc;
 800133c:	9204      	str	r2, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800133e:	d075      	beq.n	800142c <chSchGoSleepTimeoutS.4364+0x12c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8001340:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
 8001344:	ebce 060c 	rsb	r6, lr, ip
 8001348:	198a      	adds	r2, r1, r6
 800134a:	b292      	uxth	r2, r2

    if (delta < now - ch.vtlist.lasttime) {
 800134c:	42b2      	cmp	r2, r6
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800134e:	8919      	ldrh	r1, [r3, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
 8001350:	db39      	blt.n	80013c6 <chSchGoSleepTimeoutS.4364+0xc6>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8001352:	428a      	cmp	r2, r1
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8001354:	bf3e      	ittt	cc
 8001356:	eb02 060e 	addcc.w	r6, r2, lr
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800135a:	b2b6      	uxthcc	r6, r6
 800135c:	6346      	strcc	r6, [r0, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800135e:	428a      	cmp	r2, r1
 8001360:	d905      	bls.n	800136e <chSchGoSleepTimeoutS.4364+0x6e>
    delta -= p->delta;
    p = p->next;
 8001362:	681b      	ldr	r3, [r3, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
 8001364:	1a52      	subs	r2, r2, r1
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8001366:	8919      	ldrh	r1, [r3, #8]
    delta -= p->delta;
 8001368:	b292      	uxth	r2, r2
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800136a:	4291      	cmp	r1, r2
 800136c:	d3f9      	bcc.n	8001362 <chSchGoSleepTimeoutS.4364+0x62>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800136e:	6859      	ldr	r1, [r3, #4]
  vtp->prev->next = vtp;
 8001370:	ae01      	add	r6, sp, #4
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8001372:	9102      	str	r1, [sp, #8]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8001374:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
  vtp->prev->next = vtp;
 8001376:	600e      	str	r6, [r1, #0]
  p->prev = vtp;
 8001378:	605e      	str	r6, [r3, #4]
  vtp->delta = delta
 800137a:	f8ad 200c 	strh.w	r2, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 800137e:	8918      	ldrh	r0, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001380:	f64f 71ff 	movw	r1, #65535	; 0xffff
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8001384:	1a82      	subs	r2, r0, r2
 8001386:	811a      	strh	r2, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001388:	84a1      	strh	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 800138a:	4638      	mov	r0, r7
 800138c:	f7ff ffa0 	bl	80012d0 <chSchGoSleepS.4558>
    if (chVTIsArmedI(&vt)) {
 8001390:	9b04      	ldr	r3, [sp, #16]
 8001392:	b1a3      	cbz	r3, 80013be <chSchGoSleepTimeoutS.4364+0xbe>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001394:	69e2      	ldr	r2, [r4, #28]
 8001396:	f640 230c 	movw	r3, #2572	; 0xa0c
 800139a:	42b2      	cmp	r2, r6
 800139c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a0:	d020      	beq.n	80013e4 <chSchGoSleepTimeoutS.4364+0xe4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80013a2:	9a02      	ldr	r2, [sp, #8]
 80013a4:	9b01      	ldr	r3, [sp, #4]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 80013a6:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80013a8:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80013aa:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80013ac:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 80013ae:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80013b0:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80013b2:	d004      	beq.n	80013be <chSchGoSleepTimeoutS.4364+0xbe>
      vtp->next->delta += vtp->delta;
 80013b4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80013b8:	891a      	ldrh	r2, [r3, #8]
 80013ba:	440a      	add	r2, r1
 80013bc:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 80013be:	69a3      	ldr	r3, [r4, #24]
}
 80013c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013c2:	b007      	add	sp, #28
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 80013c6:	681b      	ldr	r3, [r3, #0]

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80013c8:	1a52      	subs	r2, r2, r1
 80013ca:	b292      	uxth	r2, r2
 80013cc:	8919      	ldrh	r1, [r3, #8]
 80013ce:	e7c6      	b.n	800135e <chSchGoSleepTimeoutS.4364+0x5e>
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80013d0:	f7ff ff7e 	bl	80012d0 <chSchGoSleepS.4558>
 80013d4:	f640 240c 	movw	r4, #2572	; 0xa0c
 80013d8:	f2c2 0400 	movt	r4, #8192	; 0x2000
  }

  return currp->u.rdymsg;
 80013dc:	69a3      	ldr	r3, [r4, #24]
}
 80013de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013e0:	b007      	add	sp, #28
 80013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80013e4:	9a01      	ldr	r2, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80013e6:	2100      	movs	r1, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80013e8:	42aa      	cmp	r2, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80013ea:	61da      	str	r2, [r3, #28]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80013ec:	bf08      	it	eq
 80013ee:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80013f2:	6055      	str	r5, [r2, #4]
  vtp->func = NULL;
 80013f4:	9104      	str	r1, [sp, #16]
 80013f6:	bf08      	it	eq
 80013f8:	60d9      	streq	r1, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80013fa:	d0e0      	beq.n	80013be <chSchGoSleepTimeoutS.4364+0xbe>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80013fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001400:	6a48      	ldr	r0, [r1, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001402:	8cdd      	ldrh	r5, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001404:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8001408:	8913      	ldrh	r3, [r2, #8]
 800140a:	b280      	uxth	r0, r0
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 800140c:	1b45      	subs	r5, r0, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800140e:	4433      	add	r3, r6
 8001410:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001412:	b2ad      	uxth	r5, r5

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001414:	42ab      	cmp	r3, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001416:	8113      	strh	r3, [r2, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001418:	d9d1      	bls.n	80013be <chSchGoSleepTimeoutS.4364+0xbe>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800141a:	1b5b      	subs	r3, r3, r5
 800141c:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800141e:	2b01      	cmp	r3, #1
 8001420:	bf98      	it	ls
 8001422:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8001424:	4403      	add	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001426:	b29b      	uxth	r3, r3
 8001428:	634b      	str	r3, [r1, #52]	; 0x34
 800142a:	e7c8      	b.n	80013be <chSchGoSleepTimeoutS.4364+0xbe>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 800142c:	eb01 0e0c 	add.w	lr, r1, ip
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 8001430:	ae01      	add	r6, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001432:	fa1f fe8e 	uxth.w	lr, lr
  STM32_ST_TIM->SR     = 0;
 8001436:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001438:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 800143a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800143e:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001440:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 8001442:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 8001446:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
 8001448:	6226      	str	r6, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800144a:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800144e:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001450:	60c3      	str	r3, [r0, #12]
 8001452:	e79a      	b.n	800138a <chSchGoSleepTimeoutS.4364+0x8a>
 8001454:	f3af 8000 	nop.w
 8001458:	f3af 8000 	nop.w
 800145c:	f3af 8000 	nop.w

08001460 <chThdEnqueueTimeoutS.4360>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001460:	b410      	push	{r4}
 8001462:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout) {
 8001464:	b171      	cbz	r1, 8001484 <chThdEnqueueTimeoutS.4360+0x24>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001466:	f640 230c 	movw	r3, #2572	; 0xa0c
 800146a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 800146e:	6844      	ldr	r4, [r0, #4]
 8001470:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001472:	2004      	movs	r0, #4
 8001474:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8001478:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 800147a:	6053      	str	r3, [r2, #4]
}
 800147c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001480:	f7ff bf3e 	b.w	8001300 <chSchGoSleepTimeoutS.4364>
}
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <iqGetTimeout.4301>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	2320      	movs	r3, #32
 8001494:	4604      	mov	r4, r0
 8001496:	460e      	mov	r6, r1
 8001498:	f383 8811 	msr	BASEPRI, r3
 800149c:	e003      	b.n	80014a6 <iqGetTimeout.4301+0x16>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800149e:	f7ff ffdf 	bl	8001460 <chThdEnqueueTimeoutS.4360>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80014a2:	2800      	cmp	r0, #0
 80014a4:	db1b      	blt.n	80014de <iqGetTimeout.4301+0x4e>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 80014a6:	68a5      	ldr	r5, [r4, #8]
 80014a8:	4620      	mov	r0, r4
 80014aa:	4631      	mov	r1, r6
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	d0f6      	beq.n	800149e <iqGetTimeout.4301+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80014b0:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 80014b2:	6921      	ldr	r1, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80014b4:	1c53      	adds	r3, r2, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80014b6:	68a0      	ldr	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80014b8:	428b      	cmp	r3, r1
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80014ba:	61a3      	str	r3, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80014bc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80014c0:	bf28      	it	cs
 80014c2:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80014c4:	60a0      	str	r0, [r4, #8]
  b = *iqp->q_rdptr++;
 80014c6:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80014c8:	bf28      	it	cs
 80014ca:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80014cc:	69e3      	ldr	r3, [r4, #28]
 80014ce:	b10b      	cbz	r3, 80014d4 <iqGetTimeout.4301+0x44>
    iqp->q_notify(iqp);
 80014d0:	4620      	mov	r0, r4
 80014d2:	4798      	blx	r3
 80014d4:	2300      	movs	r3, #0
 80014d6:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 80014da:	4628      	mov	r0, r5
}
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
 80014de:	f385 8811 	msr	BASEPRI, r5
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	f3af 8000 	nop.w
 80014e8:	f3af 8000 	nop.w
 80014ec:	f3af 8000 	nop.w

080014f0 <_gett.7860.4294>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80014f0:	300c      	adds	r0, #12
 80014f2:	f7ff bfcd 	b.w	8001490 <iqGetTimeout.4301>
 80014f6:	bf00      	nop
 80014f8:	f3af 8000 	nop.w
 80014fc:	f3af 8000 	nop.w

08001500 <_get.7864.4298>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001500:	300c      	adds	r0, #12
 8001502:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001506:	f7ff bfc3 	b.w	8001490 <iqGetTimeout.4301>
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w

08001510 <iqReadTimeout.4319>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 8001510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001514:	4698      	mov	r8, r3
 8001516:	b083      	sub	sp, #12
 8001518:	4604      	mov	r4, r0
 800151a:	4689      	mov	r9, r1
 800151c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 800151e:	69c7      	ldr	r7, [r0, #28]
 8001520:	2320      	movs	r3, #32
 8001522:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800152c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001530:	4442      	add	r2, r8
 8001532:	b292      	uxth	r2, r2
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 8001534:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001536:	9201      	str	r2, [sp, #4]
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001538:	fa1f fb8b 	uxth.w	fp, fp
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 800153c:	68a3      	ldr	r3, [r4, #8]
 800153e:	b30b      	cbz	r3, 8001584 <iqReadTimeout.4319+0x74>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001540:	69a3      	ldr	r3, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8001542:	68a1      	ldr	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001544:	1c5a      	adds	r2, r3, #1
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8001546:	3901      	subs	r1, #1
    *bp++ = *iqp->q_rdptr++;
 8001548:	61a2      	str	r2, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 800154a:	60a1      	str	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f109 0a01 	add.w	sl, r9, #1
 8001552:	f889 3000 	strb.w	r3, [r9]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001556:	6923      	ldr	r3, [r4, #16]
 8001558:	69a2      	ldr	r2, [r4, #24]
 800155a:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800155c:	bf24      	itt	cs
 800155e:	68e3      	ldrcs	r3, [r4, #12]
 8001560:	61a3      	strcs	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 8001562:	b10f      	cbz	r7, 8001568 <iqReadTimeout.4319+0x58>
      nfy(iqp);
 8001564:	4620      	mov	r0, r4
 8001566:	47b8      	blx	r7
 8001568:	2300      	movs	r3, #0
 800156a:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 800156e:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 8001570:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001574:	d01a      	beq.n	80015ac <iqReadTimeout.4319+0x9c>
 8001576:	2220      	movs	r2, #32
 8001578:	f382 8811 	msr	BASEPRI, r2
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 800157c:	68a3      	ldr	r3, [r4, #8]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800157e:	46d1      	mov	r9, sl
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1dd      	bne.n	8001540 <iqReadTimeout.4319+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001584:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001588:	4593      	cmp	fp, r2
 800158a:	d813      	bhi.n	80015b4 <iqReadTimeout.4319+0xa4>
 800158c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001590:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001592:	9a01      	ldr	r2, [sp, #4]
 8001594:	1a51      	subs	r1, r2, r1
 8001596:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001598:	4588      	cmp	r8, r1
 800159a:	d305      	bcc.n	80015a8 <iqReadTimeout.4319+0x98>
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff ff5f 	bl	8001460 <chThdEnqueueTimeoutS.4360>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d0ca      	beq.n	800153c <iqReadTimeout.4319+0x2c>
 80015a6:	2300      	movs	r3, #0
 80015a8:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    osalSysLock();
  }
}
 80015ac:	4630      	mov	r0, r6
 80015ae:	b003      	add	sp, #12
 80015b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b4:	4620      	mov	r0, r4
 80015b6:	4641      	mov	r1, r8
 80015b8:	f7ff ff52 	bl	8001460 <chThdEnqueueTimeoutS.4360>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80015bc:	2800      	cmp	r0, #0
 80015be:	d0bd      	beq.n	800153c <iqReadTimeout.4319+0x2c>
 80015c0:	e7f1      	b.n	80015a6 <iqReadTimeout.4319+0x96>
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	f3af 8000 	nop.w
 80015cc:	f3af 8000 	nop.w

080015d0 <_readt.7835.4308>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80015d0:	300c      	adds	r0, #12
 80015d2:	f7ff bf9d 	b.w	8001510 <iqReadTimeout.4319>
 80015d6:	bf00      	nop
 80015d8:	f3af 8000 	nop.w
 80015dc:	f3af 8000 	nop.w

080015e0 <_read.7844.4314>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80015e0:	300c      	adds	r0, #12
 80015e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e6:	f7ff bf93 	b.w	8001510 <iqReadTimeout.4319>
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w

080015f0 <oqPutTimeout.4334>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	4604      	mov	r4, r0
 80015f4:	460f      	mov	r7, r1
 80015f6:	4616      	mov	r6, r2
 80015f8:	2320      	movs	r3, #32
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	e003      	b.n	8001608 <oqPutTimeout.4334+0x18>
 8001600:	f7ff ff2e 	bl	8001460 <chThdEnqueueTimeoutS.4360>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001604:	2800      	cmp	r0, #0
 8001606:	db1a      	blt.n	800163e <oqPutTimeout.4334+0x4e>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8001608:	68a5      	ldr	r5, [r4, #8]
 800160a:	4620      	mov	r0, r4
 800160c:	4631      	mov	r1, r6
 800160e:	2d00      	cmp	r5, #0
 8001610:	d0f6      	beq.n	8001600 <oqPutTimeout.4334+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001612:	6963      	ldr	r3, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001614:	68a1      	ldr	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001616:	1c5a      	adds	r2, r3, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001618:	3901      	subs	r1, #1
  *oqp->q_wrptr++ = b;
 800161a:	6162      	str	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800161c:	60a1      	str	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 800161e:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001620:	6923      	ldr	r3, [r4, #16]
 8001622:	6962      	ldr	r2, [r4, #20]
 8001624:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001626:	bf24      	itt	cs
 8001628:	68e3      	ldrcs	r3, [r4, #12]
 800162a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800162c:	69e3      	ldr	r3, [r4, #28]
 800162e:	b10b      	cbz	r3, 8001634 <oqPutTimeout.4334+0x44>
    oqp->q_notify(oqp);
 8001630:	4620      	mov	r0, r4
 8001632:	4798      	blx	r3
 8001634:	2300      	movs	r3, #0
 8001636:	f383 8811 	msr	BASEPRI, r3
 800163a:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163e:	f385 8811 	msr	BASEPRI, r5
 8001642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001644:	f3af 8000 	nop.w
 8001648:	f3af 8000 	nop.w
 800164c:	f3af 8000 	nop.w

08001650 <_putt.7867.4325>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001650:	3030      	adds	r0, #48	; 0x30
 8001652:	f7ff bfcd 	b.w	80015f0 <oqPutTimeout.4334>
 8001656:	bf00      	nop
 8001658:	f3af 8000 	nop.w
 800165c:	f3af 8000 	nop.w

08001660 <_put.7872.4330>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001660:	3030      	adds	r0, #48	; 0x30
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	f7ff bfc3 	b.w	80015f0 <oqPutTimeout.4334>
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w

08001670 <oqWriteTimeout.4354>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	4698      	mov	r8, r3
 8001676:	b083      	sub	sp, #12
 8001678:	4604      	mov	r4, r0
 800167a:	4689      	mov	r9, r1
 800167c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 800167e:	69c7      	ldr	r7, [r0, #28]
 8001680:	2320      	movs	r3, #32
 8001682:	f383 8811 	msr	BASEPRI, r3
 8001686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800168c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001690:	4442      	add	r2, r8
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 8001692:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001694:	b292      	uxth	r2, r2
 8001696:	9201      	str	r2, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001698:	fa1f fb8b 	uxth.w	fp, fp
 800169c:	46b2      	mov	sl, r6
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 800169e:	68a3      	ldr	r3, [r4, #8]
 80016a0:	b1fb      	cbz	r3, 80016e2 <oqWriteTimeout.4354+0x72>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80016a2:	6963      	ldr	r3, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80016a4:	68a1      	ldr	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80016a6:	1c5a      	adds	r2, r3, #1
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80016a8:	3901      	subs	r1, #1
    *oqp->q_wrptr++ = *bp++;
 80016aa:	6162      	str	r2, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80016ac:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80016ae:	f899 2000 	ldrb.w	r2, [r9]
 80016b2:	f109 0901 	add.w	r9, r9, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80016b8:	6923      	ldr	r3, [r4, #16]
 80016ba:	6962      	ldr	r2, [r4, #20]
 80016bc:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80016be:	bf24      	itt	cs
 80016c0:	68e3      	ldrcs	r3, [r4, #12]
 80016c2:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 80016c4:	b10f      	cbz	r7, 80016ca <oqWriteTimeout.4354+0x5a>
      nfy(oqp);
 80016c6:	4620      	mov	r0, r4
 80016c8:	47b8      	blx	r7
 80016ca:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 80016ce:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 80016d0:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 80016d4:	d019      	beq.n	800170a <oqWriteTimeout.4354+0x9a>
 80016d6:	2320      	movs	r3, #32
 80016d8:	f383 8811 	msr	BASEPRI, r3
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 80016dc:	68a3      	ldr	r3, [r4, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1df      	bne.n	80016a2 <oqWriteTimeout.4354+0x32>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80016e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80016e6:	4593      	cmp	fp, r2
 80016e8:	d813      	bhi.n	8001712 <oqWriteTimeout.4354+0xa2>
 80016ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ee:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80016f0:	9a01      	ldr	r2, [sp, #4]
 80016f2:	1a51      	subs	r1, r2, r1
 80016f4:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 80016f6:	4588      	cmp	r8, r1
 80016f8:	d305      	bcc.n	8001706 <oqWriteTimeout.4354+0x96>
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff feb0 	bl	8001460 <chThdEnqueueTimeoutS.4360>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001700:	2800      	cmp	r0, #0
 8001702:	d0cc      	beq.n	800169e <oqWriteTimeout.4354+0x2e>
 8001704:	2300      	movs	r3, #0
 8001706:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 800170a:	4630      	mov	r0, r6
 800170c:	b003      	add	sp, #12
 800170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001712:	4620      	mov	r0, r4
 8001714:	4641      	mov	r1, r8
 8001716:	f7ff fea3 	bl	8001460 <chThdEnqueueTimeoutS.4360>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800171a:	2800      	cmp	r0, #0
 800171c:	d0bf      	beq.n	800169e <oqWriteTimeout.4354+0x2e>
 800171e:	e7f1      	b.n	8001704 <oqWriteTimeout.4354+0x94>

08001720 <_writet.7849.4343>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001720:	3030      	adds	r0, #48	; 0x30
 8001722:	f7ff bfa5 	b.w	8001670 <oqWriteTimeout.4354>
 8001726:	bf00      	nop
 8001728:	f3af 8000 	nop.w
 800172c:	f3af 8000 	nop.w

08001730 <_write.7855.4349>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001730:	3030      	adds	r0, #48	; 0x30
 8001732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001736:	f7ff bf9b 	b.w	8001670 <oqWriteTimeout.4354>
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w

08001740 <chprintf.constprop.0.4456>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001740:	b40e      	push	{r1, r2, r3}
 8001742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001746:	b094      	sub	sp, #80	; 0x50
 8001748:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800174c:	f8cd c00c 	str.w	ip, [sp, #12]
 8001750:	f10d 0c39 	add.w	ip, sp, #57	; 0x39
 8001754:	f8cd c008 	str.w	ip, [sp, #8]
 8001758:	9803      	ldr	r0, [sp, #12]
 800175a:	f8dd c008 	ldr.w	ip, [sp, #8]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800175e:	ab1e      	add	r3, sp, #120	; 0x78
 8001760:	ebc0 0c0c 	rsb	ip, r0, ip
 8001764:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001768:	f243 3c10 	movw	ip, #13072	; 0x3310
 800176c:	f6c0 0c00 	movt	ip, #2048	; 0x800
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001770:	2063      	movs	r0, #99	; 0x63
 8001772:	f243 2be4 	movw	fp, #13028	; 0x32e4
 8001776:	f640 09f0 	movw	r9, #2288	; 0x8f0
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 800177a:	f8cd c020 	str.w	ip, [sp, #32]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800177e:	f04f 0c00 	mov.w	ip, #0
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001782:	930d      	str	r3, [sp, #52]	; 0x34
 8001784:	469a      	mov	sl, r3
 8001786:	f6c0 0b00 	movt	fp, #2048	; 0x800
 800178a:	f2c2 0900 	movt	r9, #8192	; 0x2000
 800178e:	9005      	str	r0, [sp, #20]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001790:	f8cd c010 	str.w	ip, [sp, #16]
 8001794:	4606      	mov	r6, r0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001796:	f10b 0401 	add.w	r4, fp, #1
    if (c == 0)
 800179a:	b1be      	cbz	r6, 80017cc <chprintf.constprop.0.4456+0x8c>
      return n;
    if (c != '%') {
 800179c:	2e25      	cmp	r6, #37	; 0x25
 800179e:	d01b      	beq.n	80017d8 <chprintf.constprop.0.4456+0x98>
      streamPut(chp, (uint8_t)c);
      n++;
 80017a0:	f8dd c010 	ldr.w	ip, [sp, #16]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80017a4:	f8d9 3000 	ldr.w	r3, [r9]
 80017a8:	f640 00f0 	movw	r0, #2288	; 0x8f0
 80017ac:	4631      	mov	r1, r6
      n++;
 80017ae:	f10c 0c01 	add.w	ip, ip, #1
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
      n++;
 80017b8:	f8cd c010 	str.w	ip, [sp, #16]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80017bc:	4798      	blx	r3
 80017be:	f89b 6001 	ldrb.w	r6, [fp, #1]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80017c2:	46a3      	mov	fp, r4
 80017c4:	f10b 0401 	add.w	r4, fp, #1
    if (c == 0)
 80017c8:	2e00      	cmp	r6, #0
 80017ca:	d1e7      	bne.n	800179c <chprintf.constprop.0.4456+0x5c>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80017cc:	9804      	ldr	r0, [sp, #16]
 80017ce:	b014      	add	sp, #80	; 0x50
 80017d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d4:	b003      	add	sp, #12
 80017d6:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80017d8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80017dc:	2a2d      	cmp	r2, #45	; 0x2d
 80017de:	bf03      	ittte	eq
 80017e0:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 80017e4:	f10b 0402 	addeq.w	r4, fp, #2
      left_align = TRUE;
 80017e8:	2701      	moveq	r7, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 80017ea:	2700      	movne	r7, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 80017ec:	2a30      	cmp	r2, #48	; 0x30
 80017ee:	bf04      	itt	eq
 80017f0:	7862      	ldrbeq	r2, [r4, #1]
      fmt++;
 80017f2:	3401      	addeq	r4, #1
      filler = '0';
 80017f4:	46a3      	mov	fp, r4
 80017f6:	bf0c      	ite	eq
 80017f8:	2530      	moveq	r5, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 80017fa:	2520      	movne	r5, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 80017fc:	2400      	movs	r4, #0
 80017fe:	e009      	b.n	8001814 <chprintf.constprop.0.4456+0xd4>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001800:	f89a 3000 	ldrb.w	r3, [sl]
 8001804:	f10a 0a04 	add.w	sl, sl, #4
      else
        break;
      width = width * 10 + c;
 8001808:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800180c:	f89b 2000 	ldrb.w	r2, [fp]
 8001810:	eb03 0444 	add.w	r4, r3, r4, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001814:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800181c:	f10b 0b01 	add.w	fp, fp, #1
      if (c >= '0' && c <= '9')
 8001820:	d9f2      	bls.n	8001808 <chprintf.constprop.0.4456+0xc8>
        c -= '0';
      else if (c == '*')
 8001822:	2a2a      	cmp	r2, #42	; 0x2a
 8001824:	d0ec      	beq.n	8001800 <chprintf.constprop.0.4456+0xc0>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8001826:	2a2e      	cmp	r2, #46	; 0x2e
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	d04e      	beq.n	80018cc <chprintf.constprop.0.4456+0x18c>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800182e:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001832:	294c      	cmp	r1, #76	; 0x4c
 8001834:	d159      	bne.n	80018ea <chprintf.constprop.0.4456+0x1aa>
      is_long = TRUE;
      if (*fmt)
 8001836:	f89b 6000 	ldrb.w	r6, [fp]
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 800183a:	2001      	movs	r0, #1
      if (*fmt)
 800183c:	b126      	cbz	r6, 8001848 <chprintf.constprop.0.4456+0x108>
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 800183e:	2001      	movs	r0, #1
      if (*fmt)
        c = *fmt++;
 8001840:	4632      	mov	r2, r6
 8001842:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8001846:	4483      	add	fp, r0
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001848:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 800184c:	2934      	cmp	r1, #52	; 0x34
 800184e:	f200 815c 	bhi.w	8001b0a <chprintf.constprop.0.4456+0x3ca>
 8001852:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001856:	00bd      	.short	0x00bd
 8001858:	015a015a 	.word	0x015a015a
 800185c:	015a015a 	.word	0x015a015a
 8001860:	015a00bd 	.word	0x015a00bd
 8001864:	015a015a 	.word	0x015a015a
 8001868:	015a015a 	.word	0x015a015a
 800186c:	015a00bb 	.word	0x015a00bb
 8001870:	015a015a 	.word	0x015a015a
 8001874:	015a015a 	.word	0x015a015a
 8001878:	015a0054 	.word	0x015a0054
 800187c:	0158015a 	.word	0x0158015a
 8001880:	015a015a 	.word	0x015a015a
 8001884:	015a015a 	.word	0x015a015a
 8001888:	015a015a 	.word	0x015a015a
 800188c:	015a015a 	.word	0x015a015a
 8001890:	015a015a 	.word	0x015a015a
 8001894:	00bd014b 	.word	0x00bd014b
 8001898:	00f4015a 	.word	0x00f4015a
 800189c:	015a015a 	.word	0x015a015a
 80018a0:	015a00bd 	.word	0x015a00bd
 80018a4:	015a015a 	.word	0x015a015a
 80018a8:	015a015a 	.word	0x015a015a
 80018ac:	015a00bb 	.word	0x015a00bb
 80018b0:	015a015a 	.word	0x015a015a
 80018b4:	015a00cd 	.word	0x015a00cd
 80018b8:	015a0054 	.word	0x015a0054
 80018bc:	0158015a 	.word	0x0158015a
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80018c0:	f89a 1000 	ldrb.w	r1, [sl]
 80018c4:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 80018c8:	eb01 0340 	add.w	r3, r1, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80018cc:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 80018d0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 80018d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80018d8:	b2c9      	uxtb	r1, r1
 80018da:	2909      	cmp	r1, #9
 80018dc:	d9f4      	bls.n	80018c8 <chprintf.constprop.0.4456+0x188>
          c -= '0';
        else if (c == '*')
 80018de:	2a2a      	cmp	r2, #42	; 0x2a
 80018e0:	d0ee      	beq.n	80018c0 <chprintf.constprop.0.4456+0x180>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80018e2:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 80018e6:	294c      	cmp	r1, #76	; 0x4c
 80018e8:	d0a5      	beq.n	8001836 <chprintf.constprop.0.4456+0xf6>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 80018ea:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 80018ee:	b2c0      	uxtb	r0, r0
 80018f0:	2819      	cmp	r0, #25
 80018f2:	bf8c      	ite	hi
 80018f4:	2000      	movhi	r0, #0
 80018f6:	2001      	movls	r0, #1
 80018f8:	f89b 6000 	ldrb.w	r6, [fp]
 80018fc:	e7a4      	b.n	8001848 <chprintf.constprop.0.4456+0x108>

    /* Command decoding.*/
    switch (c) {
 80018fe:	220a      	movs	r2, #10
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8001900:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001904:	a80e      	add	r0, sp, #56	; 0x38
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8001906:	f10a 0a04 	add.w	sl, sl, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800190a:	2300      	movs	r3, #0
 800190c:	f7ff f9f8 	bl	8000d00 <long_to_string_with_divisor.11139.4483>
 8001910:	f8dd c00c 	ldr.w	ip, [sp, #12]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001914:	ab0e      	add	r3, sp, #56	; 0x38
 8001916:	ebcc 0000 	rsb	r0, ip, r0
 800191a:	1e42      	subs	r2, r0, #1
 800191c:	9206      	str	r2, [sp, #24]
 800191e:	9305      	str	r3, [sp, #20]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001920:	1a24      	subs	r4, r4, r0
 8001922:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 8001926:	b9ff      	cbnz	r7, 8001968 <chprintf.constprop.0.4456+0x228>
      width = -width;
 8001928:	4264      	negs	r4, r4
    if (width < 0) {
 800192a:	b1ec      	cbz	r4, 8001968 <chprintf.constprop.0.4456+0x228>
      if (*s == '-' && filler == '0') {
 800192c:	f8dd c014 	ldr.w	ip, [sp, #20]
        streamPut(chp, (uint8_t)*s++);
 8001930:	f640 07f0 	movw	r7, #2288	; 0x8f0
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8001934:	f89c 1000 	ldrb.w	r1, [ip]
 8001938:	292d      	cmp	r1, #45	; 0x2d
 800193a:	f000 80f0 	beq.w	8001b1e <chprintf.constprop.0.4456+0x3de>
 800193e:	f2c2 0700 	movt	r7, #8192	; 0x2000
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001942:	46a0      	mov	r8, r4
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f640 00f0 	movw	r0, #2288	; 0x8f0
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001950:	4629      	mov	r1, r5
 8001952:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8001954:	f118 0801 	adds.w	r8, r8, #1
 8001958:	d1f4      	bne.n	8001944 <chprintf.constprop.0.4456+0x204>
 800195a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800195e:	ebc4 0c0c 	rsb	ip, r4, ip
 8001962:	f8cd c010 	str.w	ip, [sp, #16]
 8001966:	4644      	mov	r4, r8
    }
    while (--i >= 0) {
 8001968:	9a06      	ldr	r2, [sp, #24]
 800196a:	2a00      	cmp	r2, #0
 800196c:	db19      	blt.n	80019a2 <chprintf.constprop.0.4456+0x262>
 800196e:	9b05      	ldr	r3, [sp, #20]
 8001970:	461f      	mov	r7, r3
 8001972:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001976:	4417      	add	r7, r2
      streamPut(chp, (uint8_t)*s++);
 8001978:	f8d9 3000 	ldr.w	r3, [r9]
 800197c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8001980:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800198a:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800198c:	45b8      	cmp	r8, r7
 800198e:	d1f3      	bne.n	8001978 <chprintf.constprop.0.4456+0x238>
 8001990:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001994:	f10c 0301 	add.w	r3, ip, #1
 8001998:	f8dd c018 	ldr.w	ip, [sp, #24]
 800199c:	449c      	add	ip, r3
 800199e:	f8cd c010 	str.w	ip, [sp, #16]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80019a2:	2c00      	cmp	r4, #0
 80019a4:	f43f aef7 	beq.w	8001796 <chprintf.constprop.0.4456+0x56>
 80019a8:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
 80019aa:	f8d9 3000 	ldr.w	r3, [r9]
 80019ae:	f640 00f0 	movw	r0, #2288	; 0x8f0
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80019b8:	4629      	mov	r1, r5
 80019ba:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80019bc:	3f01      	subs	r7, #1
 80019be:	d1f4      	bne.n	80019aa <chprintf.constprop.0.4456+0x26a>
 80019c0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80019c4:	44a4      	add	ip, r4
 80019c6:	f8cd c010 	str.w	ip, [sp, #16]
 80019ca:	e6e4      	b.n	8001796 <chprintf.constprop.0.4456+0x56>
 80019cc:	2208      	movs	r2, #8
 80019ce:	e797      	b.n	8001900 <chprintf.constprop.0.4456+0x1c0>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 80019d0:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80019d4:	220a      	movs	r2, #10
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
 80019d6:	2900      	cmp	r1, #0
        *p++ = '-';
 80019d8:	bfb8      	it	lt
 80019da:	232d      	movlt	r3, #45	; 0x2d
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 80019dc:	f10a 0a04 	add.w	sl, sl, #4
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
 80019e0:	bfbd      	ittte	lt
 80019e2:	4249      	neglt	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80019e4:	f88d 3038 	strblt.w	r3, [sp, #56]	; 0x38
 80019e8:	f10d 0039 	addlt.w	r0, sp, #57	; 0x39
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80019ec:	a80e      	addge	r0, sp, #56	; 0x38
 80019ee:	e78c      	b.n	800190a <chprintf.constprop.0.4456+0x1ca>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80019f0:	f8da 0000 	ldr.w	r0, [sl]
        s = "(null)";
 80019f4:	f243 22fc 	movw	r2, #13052	; 0x32fc
 80019f8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80019fc:	2800      	cmp	r0, #0
 80019fe:	bf08      	it	eq
 8001a00:	4610      	moveq	r0, r2
 8001a02:	9005      	str	r0, [sp, #20]
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001a04:	7800      	ldrb	r0, [r0, #0]
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8001a06:	f647 72ff 	movw	r2, #32767	; 0x7fff
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001a0a:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf08      	it	eq
 8001a12:	4613      	moveq	r3, r2
      for (p = s; *p && (--precision >= 0); p++)
 8001a14:	2800      	cmp	r0, #0
 8001a16:	f000 80a7 	beq.w	8001b68 <chprintf.constprop.0.4456+0x428>
 8001a1a:	9a05      	ldr	r2, [sp, #20]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	e002      	b.n	8001a26 <chprintf.constprop.0.4456+0x2e6>
 8001a20:	4293      	cmp	r3, r2
 8001a22:	f000 8093 	beq.w	8001b4c <chprintf.constprop.0.4456+0x40c>
 8001a26:	7851      	ldrb	r1, [r2, #1]
 8001a28:	3201      	adds	r2, #1
 8001a2a:	2900      	cmp	r1, #0
 8001a2c:	d1f8      	bne.n	8001a20 <chprintf.constprop.0.4456+0x2e0>
 8001a2e:	9b05      	ldr	r3, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001a30:	2520      	movs	r5, #32
 8001a32:	1ad0      	subs	r0, r2, r3
 8001a34:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001a38:	f8cd c018 	str.w	ip, [sp, #24]
 8001a3c:	e770      	b.n	8001920 <chprintf.constprop.0.4456+0x1e0>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001a3e:	f10a 0a07 	add.w	sl, sl, #7
 8001a42:	f02a 0a07 	bic.w	sl, sl, #7
 8001a46:	e9da 0100 	ldrd	r0, r1, [sl]
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	f7ff f808 	bl	8000a60 <__aeabi_d2f>
      if (f < 0) {
 8001a50:	2100      	movs	r1, #0
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001a52:	4680      	mov	r8, r0
      if (f < 0) {
 8001a54:	f7ff f8a2 	bl	8000b9c <__aeabi_fcmplt>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001a58:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 8001a5c:	9b01      	ldr	r3, [sp, #4]
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8001a5e:	aa0e      	add	r2, sp, #56	; 0x38
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d179      	bne.n	8001b58 <chprintf.constprop.0.4456+0x418>
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001a64:	f8dd c020 	ldr.w	ip, [sp, #32]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	bf28      	it	cs
 8001a6e:	2308      	movcs	r3, #8
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001a70:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]

  l = (long)num;
 8001a74:	4640      	mov	r0, r8
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001a76:	9305      	str	r3, [sp, #20]

  l = (long)num;
 8001a78:	9201      	str	r2, [sp, #4]
 8001a7a:	f7ff f8b7 	bl	8000bec <__aeabi_f2iz>
  p = long_to_string_with_divisor(p, l, 10, 0);
 8001a7e:	9a01      	ldr	r2, [sp, #4]

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8001a80:	9006      	str	r0, [sp, #24]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8001a82:	9906      	ldr	r1, [sp, #24]
 8001a84:	4610      	mov	r0, r2
 8001a86:	2300      	movs	r3, #0
 8001a88:	220a      	movs	r2, #10
 8001a8a:	f7ff f939 	bl	8000d00 <long_to_string_with_divisor.11139.4483>
  *p++ = '.';
 8001a8e:	232e      	movs	r3, #46	; 0x2e
 8001a90:	4684      	mov	ip, r0
 8001a92:	f80c 3b01 	strb.w	r3, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8001a96:	4640      	mov	r0, r8
 8001a98:	f8cd c004 	str.w	ip, [sp, #4]
 8001a9c:	f7fe fd52 	bl	8000544 <__aeabi_f2d>
 8001aa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8001aa4:	9806      	ldr	r0, [sp, #24]
 8001aa6:	f7fe fd3b 	bl	8000520 <__aeabi_i2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001ab2:	f7fe fbe7 	bl	8000284 <__aeabi_dsub>
 8001ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001aba:	9805      	ldr	r0, [sp, #20]
 8001abc:	f7fe fd20 	bl	8000500 <__aeabi_ui2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ac8:	f7fe fd90 	bl	80005ec <__aeabi_dmul>
 8001acc:	f7fe ffa0 	bl	8000a10 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8001ad0:	f64c 43cd 	movw	r3, #52429	; 0xcccd
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8001ad4:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8001ad6:	9805      	ldr	r0, [sp, #20]
 8001ad8:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8001adc:	fba3 0300 	umull	r0, r3, r3, r0
 8001ae0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	4660      	mov	r0, ip
 8001ae8:	220a      	movs	r2, #10
 8001aea:	e70f      	b.n	800190c <chprintf.constprop.0.4456+0x1cc>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8001aec:	f8da 3000 	ldr.w	r3, [sl]
 8001af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001af2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8001af6:	1e42      	subs	r2, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001af8:	ab0e      	add	r3, sp, #56	; 0x38

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8001afa:	f10a 0a04 	add.w	sl, sl, #4
 8001afe:	9206      	str	r2, [sp, #24]
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8001b00:	2520      	movs	r5, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001b02:	9305      	str	r3, [sp, #20]
 8001b04:	e70c      	b.n	8001920 <chprintf.constprop.0.4456+0x1e0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001b06:	2210      	movs	r2, #16
 8001b08:	e6fa      	b.n	8001900 <chprintf.constprop.0.4456+0x1c0>
 8001b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8001b0c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8001b10:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001b14:	aa0e      	add	r2, sp, #56	; 0x38
 8001b16:	f8cd c018 	str.w	ip, [sp, #24]
 8001b1a:	9205      	str	r2, [sp, #20]
 8001b1c:	e700      	b.n	8001920 <chprintf.constprop.0.4456+0x1e0>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8001b1e:	2d30      	cmp	r5, #48	; 0x30
 8001b20:	f47f af0d 	bne.w	800193e <chprintf.constprop.0.4456+0x1fe>
        streamPut(chp, (uint8_t)*s++);
 8001b24:	f8d9 3000 	ldr.w	r3, [r9]
 8001b28:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8001b2c:	4638      	mov	r0, r7
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4798      	blx	r3
 8001b32:	9a05      	ldr	r2, [sp, #20]
        n++;
 8001b34:	f8dd c010 	ldr.w	ip, [sp, #16]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8001b38:	3201      	adds	r2, #1
 8001b3a:	9205      	str	r2, [sp, #20]
 8001b3c:	9a06      	ldr	r2, [sp, #24]
        n++;
 8001b3e:	f10c 0c01 	add.w	ip, ip, #1
 8001b42:	3a01      	subs	r2, #1
 8001b44:	f8cd c010 	str.w	ip, [sp, #16]
 8001b48:	9206      	str	r2, [sp, #24]
 8001b4a:	e6fa      	b.n	8001942 <chprintf.constprop.0.4456+0x202>
 8001b4c:	9a05      	ldr	r2, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001b4e:	2520      	movs	r5, #32
 8001b50:	1a98      	subs	r0, r3, r2
 8001b52:	1e43      	subs	r3, r0, #1
 8001b54:	9306      	str	r3, [sp, #24]
 8001b56:	e6e3      	b.n	8001920 <chprintf.constprop.0.4456+0x1e0>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8001b58:	222d      	movs	r2, #45	; 0x2d
 8001b5a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        f = -f;
 8001b5e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8001b62:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8001b66:	e77d      	b.n	8001a64 <chprintf.constprop.0.4456+0x324>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b6c:	9306      	str	r3, [sp, #24]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001b6e:	2520      	movs	r5, #32
 8001b70:	e6d6      	b.n	8001920 <chprintf.constprop.0.4456+0x1e0>
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	f3af 8000 	nop.w
 8001b7c:	f3af 8000 	nop.w

08001b80 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b88:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001b8a:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001b92:	680a      	ldr	r2, [r1, #0]
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	0790      	lsls	r0, r2, #30
 8001b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b9e:	d5f8      	bpl.n	8001b92 <__early_init+0x12>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001ba0:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001ba2:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001ba4:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8001ba8:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001baa:	4619      	mov	r1, r3
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001bac:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001bae:	684a      	ldr	r2, [r1, #4]
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	f012 0f0c 	tst.w	r2, #12
 8001bb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bbc:	d1f7      	bne.n	8001bae <__early_init+0x2e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001bbe:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001bc0:	4619      	mov	r1, r3
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001bc2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bc6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001bc8:	680a      	ldr	r2, [r1, #0]
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	0392      	lsls	r2, r2, #14
 8001bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bd4:	d5f8      	bpl.n	8001bc8 <__early_init+0x48>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001bd6:	685a      	ldr	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001bd8:	4619      	mov	r1, r3
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001bda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bde:	605a      	str	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001be6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001be8:	680a      	ldr	r2, [r1, #0]
 8001bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bee:	0190      	lsls	r0, r2, #6
 8001bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf4:	d5f8      	bpl.n	8001be8 <__early_init+0x68>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bfe:	2110      	movs	r1, #16
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#else
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 8001c00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c04:	6058      	str	r0, [r3, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001c06:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001c08:	6859      	ldr	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001c0a:	461a      	mov	r2, r3
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001c0c:	f041 0102 	orr.w	r1, r1, #2
 8001c10:	6059      	str	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001c12:	6853      	ldr	r3, [r2, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d1fa      	bne.n	8001c12 <__early_init+0x92>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4602      	mov	r2, r0
 8001c24:	2320      	movs	r3, #32
 8001c26:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8001c2a:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c32:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001c34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001c36:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001c3a:	42a8      	cmp	r0, r5
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8001c3c:	6262      	str	r2, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001c3e:	d006      	beq.n	8001c4e <chThdExit+0x2e>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001c44:	f7ff f9d4 	bl	8000ff0 <chSchReadyI.4561>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001c48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d1f8      	bne.n	8001c40 <chThdExit+0x20>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8001c4e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001c52:	b94b      	cbnz	r3, 8001c68 <chThdExit+0x48>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8001c54:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8001c58:	079d      	lsls	r5, r3, #30
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8001c5a:	bf01      	itttt	eq
 8001c5c:	6922      	ldreq	r2, [r4, #16]
 8001c5e:	6963      	ldreq	r3, [r4, #20]
 8001c60:	611a      	streq	r2, [r3, #16]
 8001c62:	6922      	ldreq	r2, [r4, #16]
 8001c64:	bf08      	it	eq
 8001c66:	6153      	streq	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001c68:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8001c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001c6e:	f7ff bb2f 	b.w	80012d0 <chSchGoSleepS.4558>
 8001c72:	bf00      	nop
 8001c74:	f3af 8000 	nop.w
 8001c78:	f3af 8000 	nop.w
 8001c7c:	f3af 8000 	nop.w

08001c80 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8001c80:	f640 220c 	movw	r2, #2572	; 0xa0c
 8001c84:	f2c2 0200 	movt	r2, #8192	; 0x2000
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8001c88:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001c8a:	b470      	push	{r4, r5, r6}

  tqp->next             = tp->queue.next;
 8001c8c:	6803      	ldr	r3, [r0, #0]
  thread_t *otp = currp;
 8001c8e:	6995      	ldr	r5, [r2, #24]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001c90:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001c92:	2100      	movs	r1, #0
 8001c94:	68ac      	ldr	r4, [r5, #8]
 8001c96:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001c98:	605a      	str	r2, [r3, #4]
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001c9a:	f880 6020 	strb.w	r6, [r0, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001c9e:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001ca0:	f885 1020 	strb.w	r1, [r5, #32]
 8001ca4:	e000      	b.n	8001ca8 <chSchDoReschedule+0x28>
 8001ca6:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d8fb      	bhi.n	8001ca6 <chSchDoReschedule+0x26>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001cae:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001cb0:	4629      	mov	r1, r5
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001cb2:	602b      	str	r3, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8001cb4:	606a      	str	r2, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8001cb6:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001cb8:	605d      	str	r5, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8001cba:	bc70      	pop	{r4, r5, r6}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001cbc:	f7fe baca 	b.w	8000254 <_port_switch>

08001cc0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001cc0:	b4f0      	push	{r4, r5, r6, r7}
 8001cc2:	4e13      	ldr	r6, [pc, #76]	; (8001d10 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	f106 0770 	add.w	r7, r6, #112	; 0x70
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8001cca:	f1a6 0110 	sub.w	r1, r6, #16
 8001cce:	c91a      	ldmia	r1, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001cd0:	42a3      	cmp	r3, r4
 8001cd2:	d20d      	bcs.n	8001cf0 <__init_ram_areas+0x30>
 8001cd4:	3904      	subs	r1, #4
 8001cd6:	461a      	mov	r2, r3
      *p = *tp;
 8001cd8:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001cdc:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001ce0:	42a2      	cmp	r2, r4
 8001ce2:	d3f9      	bcc.n	8001cd8 <__init_ram_areas+0x18>
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	4414      	add	r4, r2
 8001ce8:	f024 0403 	bic.w	r4, r4, #3
 8001cec:	3404      	adds	r4, #4
 8001cee:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001cf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d203      	bcs.n	8001d00 <__init_ram_areas+0x40>
      *p = 0;
 8001cf8:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d3fb      	bcc.n	8001cf8 <__init_ram_areas+0x38>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001d00:	42be      	cmp	r6, r7
 8001d02:	f106 0310 	add.w	r3, r6, #16
 8001d06:	d201      	bcs.n	8001d0c <__init_ram_areas+0x4c>
 8001d08:	461e      	mov	r6, r3
 8001d0a:	e7de      	b.n	8001cca <__init_ram_areas+0xa>
#endif
}
 8001d0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d0e:	4770      	bx	lr
 8001d10:	08003260 	.word	0x08003260
 8001d14:	f3af 8000 	nop.w
 8001d18:	f3af 8000 	nop.w
 8001d1c:	f3af 8000 	nop.w

08001d20 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001d20:	e7fe      	b.n	8001d20 <__default_exit>
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	f3af 8000 	nop.w
 8001d2c:	f3af 8000 	nop.w

08001d30 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	f3af 8000 	nop.w
 8001d38:	f3af 8000 	nop.w
 8001d3c:	f3af 8000 	nop.w

08001d40 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	f3af 8000 	nop.w
 8001d4c:	f3af 8000 	nop.w

08001d50 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 8001d50:	b4f0      	push	{r4, r5, r6, r7}
 8001d52:	2320      	movs	r3, #32
 8001d54:	f383 8811 	msr	BASEPRI, r3
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8001d58:	7802      	ldrb	r2, [r0, #0]

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8001d5a:	684b      	ldr	r3, [r1, #4]
 8001d5c:	2a01      	cmp	r2, #1
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8001d5e:	6041      	str	r1, [r0, #4]
  pwmp->period = config->period;
 8001d60:	6083      	str	r3, [r0, #8]
 8001d62:	d059      	beq.n	8001e18 <pwmStart+0xc8>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001d64:	6983      	ldr	r3, [r0, #24]
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8001d6a:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001d74:	6946      	ldr	r6, [r0, #20]
 8001d76:	680d      	ldr	r5, [r1, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001d78:	68ca      	ldr	r2, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8001d7a:	6884      	ldr	r4, [r0, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001d7c:	6acf      	ldr	r7, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001d7e:	fbb6 f5f5 	udiv	r5, r6, r5
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001d82:	f002 020f 	and.w	r2, r2, #15
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001d86:	3d01      	subs	r5, #1
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8001d88:	3c01      	subs	r4, #1
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001d8a:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8001d8c:	629d      	str	r5, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8001d8e:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001d90:	605f      	str	r7, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001d92:	d03f      	beq.n	8001e14 <pwmStart+0xc4>
 8001d94:	2a02      	cmp	r2, #2
 8001d96:	d13b      	bne.n	8001e10 <pwmStart+0xc0>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC1P;
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
 8001d98:	f042 0201 	orr.w	r2, r2, #1
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001d9c:	694c      	ldr	r4, [r1, #20]
 8001d9e:	f004 040f 	and.w	r4, r4, #15
 8001da2:	2c01      	cmp	r4, #1
 8001da4:	d031      	beq.n	8001e0a <pwmStart+0xba>
 8001da6:	2c02      	cmp	r4, #2
 8001da8:	d02d      	beq.n	8001e06 <pwmStart+0xb6>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8001daa:	69cc      	ldr	r4, [r1, #28]
 8001dac:	f004 040f 	and.w	r4, r4, #15
 8001db0:	2c01      	cmp	r4, #1
 8001db2:	d025      	beq.n	8001e00 <pwmStart+0xb0>
 8001db4:	2c02      	cmp	r4, #2
 8001db6:	d021      	beq.n	8001dfc <pwmStart+0xac>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8001db8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001dba:	f004 040f 	and.w	r4, r4, #15
 8001dbe:	2c01      	cmp	r4, #1
 8001dc0:	d003      	beq.n	8001dca <pwmStart+0x7a>
 8001dc2:	2c02      	cmp	r4, #2
 8001dc4:	d103      	bne.n	8001dce <pwmStart+0x7e>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 8001dc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8001dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001dce:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001dd0:	f04f 0c01 	mov.w	ip, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001dd4:	2100      	movs	r1, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001dd6:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001dda:	f44f 4600 	mov.w	r6, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001dde:	2585      	movs	r5, #133	; 0x85
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8001de0:	2402      	movs	r4, #2
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8001de2:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001de4:	f8c3 c014 	str.w	ip, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001de8:	6119      	str	r1, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001dea:	60df      	str	r7, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001dec:	645e      	str	r6, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001dee:	601d      	str	r5, [r3, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8001df0:	60c1      	str	r1, [r0, #12]
  pwmp->state = PWM_READY;
 8001df2:	7004      	strb	r4, [r0, #0]
 8001df4:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 8001df8:	bcf0      	pop	{r4, r5, r6, r7}
 8001dfa:	4770      	bx	lr
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8001dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8001e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e04:	e7d8      	b.n	8001db8 <pwmStart+0x68>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 8001e06:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	e7cc      	b.n	8001daa <pwmStart+0x5a>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 8001e10:	2200      	movs	r2, #0
 8001e12:	e7c3      	b.n	8001d9c <pwmStart+0x4c>
 8001e14:	2200      	movs	r2, #0
 8001e16:	e7bf      	b.n	8001d98 <pwmStart+0x48>
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
 8001e18:	f640 237c 	movw	r3, #2684	; 0xa7c
 8001e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e20:	4298      	cmp	r0, r3
 8001e22:	d00c      	beq.n	8001e3e <pwmStart+0xee>
#endif
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
 8001e24:	f640 2398 	movw	r3, #2712	; 0xa98
 8001e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e2c:	4298      	cmp	r0, r3
 8001e2e:	d02e      	beq.n	8001e8e <pwmStart+0x13e>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8001e30:	6983      	ldr	r3, [r0, #24]
 8001e32:	f646 0268 	movw	r2, #26728	; 0x6868
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	6841      	ldr	r1, [r0, #4]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001e3a:	61da      	str	r2, [r3, #28]
 8001e3c:	e79a      	b.n	8001d74 <pwmStart+0x24>

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 8001e3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e46:	6991      	ldr	r1, [r2, #24]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e48:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001e4c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001e50:	6191      	str	r1, [r2, #24]
      rccResetTIM1();
 8001e52:	68d4      	ldr	r4, [r2, #12]
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8001e54:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8001e58:	f2ce 0300 	movt	r3, #57344	; 0xe000
  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
      rccResetTIM1();
 8001e5c:	f444 6c00 	orr.w	ip, r4, #2048	; 0x800
 8001e60:	2570      	movs	r5, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e62:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001e66:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
 8001e6a:	2700      	movs	r7, #0
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8001e6c:	f2c0 116e 	movt	r1, #366	; 0x16e
  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
      rccResetTIM1();
 8001e70:	f8c2 c00c 	str.w	ip, [r2, #12]
 8001e74:	60d7      	str	r7, [r2, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e76:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e7a:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e7e:	601e      	str	r6, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e80:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e84:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e88:	601c      	str	r4, [r3, #0]
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8001e8a:	6141      	str	r1, [r0, #20]
 8001e8c:	e7d0      	b.n	8001e30 <pwmStart+0xe0>
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
 8001e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e96:	69d9      	ldr	r1, [r3, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e98:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001e9c:	f041 0102 	orr.w	r1, r1, #2
 8001ea0:	61d9      	str	r1, [r3, #28]
      rccResetTIM3();
 8001ea2:	691f      	ldr	r7, [r3, #16]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8001ea4:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8001ea8:	f2ce 0200 	movt	r2, #57344	; 0xe000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001eac:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
      rccResetTIM3();
 8001eb0:	f047 0702 	orr.w	r7, r7, #2
 8001eb4:	2600      	movs	r6, #0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001eb6:	2570      	movs	r5, #112	; 0x70
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8001eb8:	f2c0 116e 	movt	r1, #366	; 0x16e
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
      rccResetTIM3();
 8001ebc:	611f      	str	r7, [r3, #16]
 8001ebe:	611e      	str	r6, [r3, #16]
 8001ec0:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ec4:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ec8:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8001eca:	6141      	str	r1, [r0, #20]
 8001ecc:	e7b0      	b.n	8001e30 <pwmStart+0xe0>
 8001ece:	bf00      	nop

08001ed0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001ed0:	b508      	push	{r3, lr}
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001eda:	2008      	movs	r0, #8
 8001edc:	f7ff fa10 	bl	8001300 <chSchGoSleepTimeoutS.4364>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	bd08      	pop	{r3, pc}
 8001ee8:	f3af 8000 	nop.w
 8001eec:	f3af 8000 	nop.w

08001ef0 <Thread2.11490>:

/*
 * Blinker thread #2.
 */
static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 8001ef0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001ef2:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	f243 3304 	movw	r3, #13060	; 0x3304
 8001f00:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f04:	6193      	str	r3, [r2, #24]
  (void)arg;

  chRegSetThreadName("send2uart");
  while (true) {
	//chprintf((BaseSequentialStream*)&SD1,"comunicacion STM32 \r\n");
	chprintf((BaseSequentialStream*)&SD2,"comunicacion STM32 \r\n");
 8001f06:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001f0a:	f243 21e4 	movw	r1, #13028	; 0x32e4
 8001f0e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001f12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f16:	f7ff fc13 	bl	8001740 <chprintf.constprop.0.4456>
	//chprintf((BaseSequentialStream*)&SD3,"comunicacion STM32 \r\n");
  chThdSleepMilliseconds(1000);
 8001f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1e:	f7ff ffd7 	bl	8001ed0 <chThdSleep>
 8001f22:	e7f0      	b.n	8001f06 <Thread2.11490+0x16>
 8001f24:	f3af 8000 	nop.w
 8001f28:	f3af 8000 	nop.w
 8001f2c:	f3af 8000 	nop.w

08001f30 <chSchWakeupS.constprop.17>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001f30:	b4f0      	push	{r4, r5, r6, r7}
  thread_t *otp = currp;
 8001f32:	f640 270c 	movw	r7, #2572	; 0xa0c
 8001f36:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8001f3a:	f8d7 c018 	ldr.w	ip, [r7, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001f3e:	6885      	ldr	r5, [r0, #8]
 8001f40:	f8dc 4008 	ldr.w	r4, [ip, #8]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8001f44:	2300      	movs	r3, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001f46:	42a5      	cmp	r5, r4
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001f48:	4606      	mov	r6, r0
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8001f4a:	6243      	str	r3, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001f4c:	d80d      	bhi.n	8001f6a <chSchWakeupS.constprop.17+0x3a>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001f4e:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001f52:	463b      	mov	r3, r7
  do {
    cp = cp->queue.next;
 8001f54:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4295      	cmp	r5, r2
 8001f5a:	d9fb      	bls.n	8001f54 <chSchWakeupS.constprop.17+0x24>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001f5c:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001f5e:	6033      	str	r3, [r6, #0]
  tp->queue.prev             = cp->queue.prev;
 8001f60:	6072      	str	r2, [r6, #4]
  tp->queue.prev->queue.next = tp;
 8001f62:	6016      	str	r6, [r2, #0]
  cp->queue.prev             = tp;
 8001f64:	605e      	str	r6, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8001f66:	bcf0      	pop	{r4, r5, r6, r7}
 8001f68:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001f6a:	f88c 3020 	strb.w	r3, [ip, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001f6e:	463b      	mov	r3, r7
  do {
    cp = cp->queue.next;
 8001f70:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4294      	cmp	r4, r2
 8001f76:	d9fb      	bls.n	8001f70 <chSchWakeupS.constprop.17+0x40>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001f78:	685a      	ldr	r2, [r3, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8001f7a:	2401      	movs	r4, #1
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001f7c:	f8cc 3000 	str.w	r3, [ip]
  tp->queue.prev             = cp->queue.prev;
 8001f80:	f8cc 2004 	str.w	r2, [ip, #4]
  tp->queue.prev->queue.next = tp;
 8001f84:	f8c2 c000 	str.w	ip, [r2]
  cp->queue.prev             = tp;
 8001f88:	f8c3 c004 	str.w	ip, [r3, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8001f8c:	f886 4020 	strb.w	r4, [r6, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001f90:	4630      	mov	r0, r6
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8001f92:	61be      	str	r6, [r7, #24]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001f94:	4661      	mov	r1, ip
  }
}
 8001f96:	bcf0      	pop	{r4, r5, r6, r7}
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001f98:	f7fe b95c 	b.w	8000254 <_port_switch>
 8001f9c:	f3af 8000 	nop.w

08001fa0 <sdObjectInit.constprop.8>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001fa0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

  sdp->vmt = &vmt;
 8001fa4:	f243 3334 	movw	r3, #13108	; 0x3334
 8001fa8:	4604      	mov	r4, r0
 8001faa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001fae:	f844 3b04 	str.w	r3, [r4], #4
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001fb2:	2700      	movs	r7, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001fb4:	f100 0364 	add.w	r3, r0, #100	; 0x64
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001fb8:	f100 0254 	add.w	r2, r0, #84	; 0x54
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
 8001fbc:	f100 060c 	add.w	r6, r0, #12
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8001fc0:	f100 0530 	add.w	r5, r0, #48	; 0x30
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001fc4:	f04f 0901 	mov.w	r9, #1
  oqp->q_counter = size;
 8001fc8:	f04f 0810 	mov.w	r8, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001fcc:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001fd0:	6147      	str	r7, [r0, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001fd2:	6044      	str	r4, [r0, #4]
 8001fd4:	f880 9008 	strb.w	r9, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001fd8:	6287      	str	r7, [r0, #40]	; 0x28
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001fda:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001fde:	60c6      	str	r6, [r0, #12]
  tqp->prev = (thread_t *)tqp;
 8001fe0:	6106      	str	r6, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001fe2:	6305      	str	r5, [r0, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8001fe4:	6345      	str	r5, [r0, #52]	; 0x34
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8001fe6:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001fe8:	64c1      	str	r1, [r0, #76]	; 0x4c
  oqp->q_link    = link;
 8001fea:	6500      	str	r0, [r0, #80]	; 0x50
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001fec:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001ff0:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8001ff2:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001ff4:	6202      	str	r2, [r0, #32]
  iqp->q_top     = bp + size;
 8001ff6:	61c3      	str	r3, [r0, #28]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001ff8:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001ffa:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001ffc:	6443      	str	r3, [r0, #68]	; 0x44
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
 8001ffe:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002002:	4770      	bx	lr
 8002004:	f3af 8000 	nop.w
 8002008:	f3af 8000 	nop.w
 800200c:	f3af 8000 	nop.w

08002010 <pwmEnableChannel.constprop.5>:
 8002010:	2320      	movs	r3, #32
 8002012:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002016:	68c3      	ldr	r3, [r0, #12]
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8002018:	6982      	ldr	r2, [r0, #24]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	60c3      	str	r3, [r0, #12]
 8002020:	2300      	movs	r3, #0
 8002022:	6351      	str	r1, [r2, #52]	; 0x34
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w

08002030 <pwmEnableChannelNotification.constprop.3>:
 8002030:	2320      	movs	r3, #32
 8002032:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void pwm_lld_enable_channel_notification(PWMDriver *pwmp,
                                         pwmchannel_t channel) {
  uint32_t dier = pwmp->tim->DIER;
 8002036:	6983      	ldr	r3, [r0, #24]
 8002038:	68da      	ldr	r2, [r3, #12]
  osalDbgAssert(channel < 4, "callback not supported");
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
 800203a:	0791      	lsls	r1, r2, #30
    pwmp->tim->DIER = dier | (2 << channel);
 800203c:	bf5f      	itttt	pl
 800203e:	f042 0202 	orrpl.w	r2, r2, #2
    pwmp->tim->SR   = ~(2 << channel);
 8002042:	f06f 0102 	mvnpl.w	r1, #2
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
    pwmp->tim->DIER = dier | (2 << channel);
 8002046:	60da      	strpl	r2, [r3, #12]
    pwmp->tim->SR   = ~(2 << channel);
 8002048:	6119      	strpl	r1, [r3, #16]
 800204a:	2300      	movs	r3, #0
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	f3af 8000 	nop.w
 8002058:	f3af 8000 	nop.w
 800205c:	f3af 8000 	nop.w

08002060 <pwmEnablePeriodicNotification>:
 8002060:	2320      	movs	r3, #32
 8002062:	f383 8811 	msr	BASEPRI, r3
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_enable_periodic_notification(PWMDriver *pwmp) {
  uint32_t dier = pwmp->tim->DIER;
 8002066:	6983      	ldr	r3, [r0, #24]
 8002068:	68da      	ldr	r2, [r3, #12]

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 800206a:	07d0      	lsls	r0, r2, #31
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 800206c:	bf5f      	itttt	pl
 800206e:	f042 0201 	orrpl.w	r2, r2, #1
 8002072:	60da      	strpl	r2, [r3, #12]
    pwmp->tim->SR &= STM32_TIM_SR_UIF;
 8002074:	691a      	ldrpl	r2, [r3, #16]
 8002076:	f002 0201 	andpl.w	r2, r2, #1
 800207a:	bf58      	it	pl
 800207c:	611a      	strpl	r2, [r3, #16]
 800207e:	2300      	movs	r3, #0
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	f3af 8000 	nop.w
 800208c:	f3af 8000 	nop.w

08002090 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8002090:	2a03      	cmp	r2, #3
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002092:	b4f0      	push	{r4, r5, r6, r7}
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
 8002094:	bf08      	it	eq
 8002096:	6101      	streq	r1, [r0, #16]
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8002098:	d002      	beq.n	80020a0 <_pal_lld_setgroupmode+0x10>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 800209a:	2a04      	cmp	r2, #4
    port->BRR = mask;
 800209c:	bf08      	it	eq
 800209e:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
 80020a0:	f243 23d0 	movw	r3, #13008	; 0x32d0
 80020a4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020a8:	5c9f      	ldrb	r7, [r3, r2]
  mh = ml = crh = crl = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	461c      	mov	r4, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	461d      	mov	r5, r3

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
 80020b2:	2608      	movs	r6, #8
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 80020b4:	f011 0f80 	tst.w	r1, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 80020b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    mh <<= 4;
    crl <<= 4;
 80020bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 80020c0:	ea4f 1505 	mov.w	r5, r5, lsl #4
    crl <<= 4;
    crh <<= 4;
 80020c4:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 80020c8:	bf0c      	ite	eq
 80020ca:	f042 020f 	orreq.w	r2, r2, #15
    else
      crl |= cfg;
 80020ce:	433b      	orrne	r3, r7
    if ((mask & 0x8000) == 0)
 80020d0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 80020d4:	bf0c      	ite	eq
 80020d6:	f045 050f 	orreq.w	r5, r5, #15
    else
      crh |= cfg;
 80020da:	433c      	orrne	r4, r7
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80020dc:	3e01      	subs	r6, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 80020de:	ea4f 0141 	mov.w	r1, r1, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80020e2:	d1e7      	bne.n	80020b4 <_pal_lld_setgroupmode+0x24>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 80020e4:	6841      	ldr	r1, [r0, #4]
 80020e6:	400d      	ands	r5, r1
 80020e8:	432c      	orrs	r4, r5
 80020ea:	6044      	str	r4, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80020ec:	6801      	ldr	r1, [r0, #0]
}
 80020ee:	bcf0      	pop	{r4, r5, r6, r7}
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
  port->CRL = (port->CRL & ml) | crl;
 80020f0:	400a      	ands	r2, r1
 80020f2:	4313      	orrs	r3, r2
 80020f4:	6003      	str	r3, [r0, #0]
}
 80020f6:	4770      	bx	lr
 80020f8:	f3af 8000 	nop.w
 80020fc:	f3af 8000 	nop.w

08002100 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002100:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002104:	2400      	movs	r4, #0
 8002106:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800210a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800210e:	692b      	ldr	r3, [r5, #16]
int PosCy=0;
bool s=true;



int main(void) {
 8002110:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002114:	612e      	str	r6, [r5, #16]
 8002116:	612c      	str	r4, [r5, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002118:	68eb      	ldr	r3, [r5, #12]
 800211a:	60ee      	str	r6, [r5, #12]
 800211c:	60ec      	str	r4, [r5, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800211e:	69ea      	ldr	r2, [r5, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002120:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8002124:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002128:	61ea      	str	r2, [r5, #28]
  rccEnableBKPInterface(FALSE);
 800212a:	69ea      	ldr	r2, [r5, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800212c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8002130:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002134:	61ea      	str	r2, [r5, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	b08b      	sub	sp, #44	; 0x2c
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 800213a:	f640 0b74 	movw	fp, #2164	; 0x874
 800213e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002142:	f8cd b00c 	str.w	fp, [sp, #12]
 8002146:	601a      	str	r2, [r3, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8002148:	69ab      	ldr	r3, [r5, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800214a:	f44f 6700 	mov.w	r7, #2048	; 0x800
  GPIOA->CRH = config->PAData.crh;
 800214e:	f248 4bb8 	movw	fp, #33976	; 0x84b8
 8002152:	f640 0074 	movw	r0, #2164	; 0x874
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002156:	f2c4 0701 	movt	r7, #16385	; 0x4001
 800215a:	f2c2 0000 	movt	r0, #8192	; 0x2000
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800215e:	f043 037d 	orr.w	r3, r3, #125	; 0x7d

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8002162:	f6c8 0b88 	movt	fp, #34952	; 0x8888
 8002166:	9003      	str	r0, [sp, #12]
  GPIOA->CRL = config->PAData.crl;
 8002168:	f243 3c44 	movw	ip, #13124	; 0x3344
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800216c:	61ab      	str	r3, [r5, #24]
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 800216e:	f44f 6e40 	mov.w	lr, #3072	; 0xc00
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002172:	60fe      	str	r6, [r7, #12]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 8002174:	f648 0288 	movw	r2, #34952	; 0x8888

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8002178:	f8c7 b004 	str.w	fp, [r7, #4]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800217c:	f640 2b98 	movw	fp, #2712	; 0xa98
 8002180:	f2c2 0b00 	movt	fp, #8192	; 0x2000
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8002184:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8002188:	f2c4 4c43 	movt	ip, #17475	; 0x4443
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800218c:	f2cb 42b3 	movt	r2, #46259	; 0xb4b3
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8002190:	f8c7 c000 	str.w	ip, [r7]
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	f8cd b018 	str.w	fp, [sp, #24]
  GPIOC->CRH = config->PCData.crh;
 800219c:	f248 4a4b 	movw	sl, #33867	; 0x844b
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80021a0:	f8ce 600c 	str.w	r6, [lr, #12]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 80021a4:	f644 3884 	movw	r8, #19332	; 0x4b84
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80021a8:	f8ce 2004 	str.w	r2, [lr, #4]
  GPIOB->CRL = config->PBData.crl;
 80021ac:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80021b0:	f8ce 2000 	str.w	r2, [lr]
  GPIOC->ODR = config->PCData.odr;
 80021b4:	f2c4 0101 	movt	r1, #16385	; 0x4001
  GPIOC->CRH = config->PCData.crh;
 80021b8:	f6c8 0a88 	movt	sl, #34952	; 0x8888
  GPIOC->CRL = config->PCData.crl;
 80021bc:	f2cb 48b3 	movt	r8, #46259	; 0xb4b3
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80021c0:	f46f 7e40 	mvn.w	lr, #768	; 0x300
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80021c4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80021c8:	f648 0944 	movw	r9, #34884	; 0x8844
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80021cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80021d0:	f2c4 0001 	movt	r0, #16385	; 0x4001
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80021d4:	f8c1 a004 	str.w	sl, [r1, #4]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80021d8:	f6c8 0988 	movt	r9, #34952	; 0x8888
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 80021dc:	f8c1 8000 	str.w	r8, [r1]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80021e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021e4:	f640 277c 	movw	r7, #2684	; 0xa7c

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
 80021e8:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 80021ec:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80021f0:	f640 5191 	movw	r1, #3473	; 0xd91
 80021f4:	f04f 0801 	mov.w	r8, #1
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80021f8:	60c6      	str	r6, [r0, #12]
 80021fa:	f2c2 0700 	movt	r7, #8192	; 0x2000
  GPIOD->CRH = config->PDData.crh;
 80021fe:	6042      	str	r2, [r0, #4]
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002200:	f2c4 0301 	movt	r3, #16385	; 0x4001

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
 8002204:	f2c4 0c01 	movt	ip, #16385	; 0x4001

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 8002208:	f2c4 0e00 	movt	lr, #16384	; 0x4000
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800220c:	f8c0 9000 	str.w	r9, [r0]
 8002210:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002214:	9803      	ldr	r0, [sp, #12]
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002216:	f04f 0904 	mov.w	r9, #4
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 800221a:	f640 0af0 	movw	sl, #2288	; 0x8f0
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800221e:	60de      	str	r6, [r3, #12]
 8002220:	f2c2 0a00 	movt	sl, #8192	; 0x2000
  GPIOE->CRH = config->PEData.crh;
 8002224:	605a      	str	r2, [r3, #4]
  GPIOE->CRL = config->PEData.crl;
 8002226:	601a      	str	r2, [r3, #0]
  PWMD1.tim = STM32_TIM1;
 8002228:	f8c7 c018 	str.w	ip, [r7, #24]

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 800222c:	f8cb e018 	str.w	lr, [fp, #24]
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002230:	f887 9010 	strb.w	r9, [r7, #16]
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8002234:	f88b 9010 	strb.w	r9, [fp, #16]
  pwmp->config   = NULL;
 8002238:	607c      	str	r4, [r7, #4]
  pwmp->enabled  = 0;
 800223a:	60fc      	str	r4, [r7, #12]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800223c:	f887 8000 	strb.w	r8, [r7]
 8002240:	f88b 8000 	strb.w	r8, [fp]
  pwmp->config   = NULL;
 8002244:	f8cb 4004 	str.w	r4, [fp, #4]
  pwmp->enabled  = 0;
 8002248:	f8cb 400c 	str.w	r4, [fp, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 800224c:	f7ff fea8 	bl	8001fa0 <sdObjectInit.constprop.8>
  SD1.usart = USART1;
 8002250:	9a03      	ldr	r2, [sp, #12]
 8002252:	f44f 5360 	mov.w	r3, #14336	; 0x3800
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002256:	f640 5171 	movw	r1, #3441	; 0xd71
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 800225a:	f2c4 0301 	movt	r3, #16385	; 0x4001
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 800225e:	4650      	mov	r0, sl
 8002260:	f6c0 0100 	movt	r1, #2048	; 0x800
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002264:	f640 196c 	movw	r9, #2412	; 0x96c
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002268:	6753      	str	r3, [r2, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800226a:	f2c2 0900 	movt	r9, #8192	; 0x2000
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 800226e:	f7ff fe97 	bl	8001fa0 <sdObjectInit.constprop.8>
  SD2.usart = USART2;
 8002272:	f44f 4388 	mov.w	r3, #17408	; 0x4400
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002276:	f640 5151 	movw	r1, #3409	; 0xd51
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 800227a:	f2c4 0300 	movt	r3, #16384	; 0x4000
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800227e:	4648      	mov	r0, r9
 8002280:	f6c0 0100 	movt	r1, #2048	; 0x800
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8002284:	f8ca 3074 	str.w	r3, [sl, #116]	; 0x74
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002288:	f7ff fe8a 	bl	8001fa0 <sdObjectInit.constprop.8>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800228c:	69ea      	ldr	r2, [r5, #28]
  SD3.usart = USART3;
 800228e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002292:	ea42 0208 	orr.w	r2, r2, r8
 8002296:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800229a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229e:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
 80022a2:	f2ce 0104 	movt	r1, #57348	; 0xe004

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80022a6:	61ea      	str	r2, [r5, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80022a8:	684d      	ldr	r5, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80022aa:	f640 230c 	movw	r3, #2572	; 0xa0c
 80022ae:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80022b2:	604d      	str	r5, [r1, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80022b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022b8:	f645 55bf 	movw	r5, #23999	; 0x5dbf
 80022bc:	628d      	str	r5, [r1, #40]	; 0x28
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80022be:	f640 12e8 	movw	r2, #2536	; 0x9e8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80022c2:	f64f 75ff 	movw	r5, #65535	; 0xffff

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022c6:	f44f 4a61 	mov.w	sl, #57600	; 0xe100
 80022ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ce:	62cd      	str	r5, [r1, #44]	; 0x2c
 80022d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  STM32_ST_TIM->CCMR1  = 0;
 80022d4:	618c      	str	r4, [r1, #24]
 80022d6:	f2ce 0a00 	movt	sl, #57344	; 0xe000
  STM32_ST_TIM->CCR[0] = 0;
 80022da:	634c      	str	r4, [r1, #52]	; 0x34
 80022dc:	2580      	movs	r5, #128	; 0x80
  STM32_ST_TIM->DIER   = 0;
 80022de:	60cc      	str	r4, [r1, #12]
 80022e0:	f640 79a1 	movw	r9, #4001	; 0xfa1
  STM32_ST_TIM->CR2    = 0;
 80022e4:	604c      	str	r4, [r1, #4]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 80022e6:	f640 20b4 	movw	r0, #2740	; 0xab4
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80022ea:	f8c1 8014 	str.w	r8, [r1, #20]
 80022ee:	f640 4cf0 	movw	ip, #3312	; 0xcf0
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80022f2:	f8c1 8000 	str.w	r8, [r1]
  ch_memcore.endmem  = __heap_end__;
 80022f6:	f242 0e00 	movw	lr, #8192	; 0x2000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022fe:	f88a 531c 	strb.w	r5, [sl, #796]	; 0x31c
 8002302:	f6c0 0900 	movt	r9, #2048	; 0x800
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002306:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 800230a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800230e:	f8ca 1000 	str.w	r1, [sl]
 8002312:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 8002316:	f102 0a10 	add.w	sl, r2, #16
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800231a:	f103 011c 	add.w	r1, r3, #28
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 800231e:	849e      	strh	r6, [r3, #36]	; 0x24
  ch_memcore.endmem  = __heap_end__;
 8002320:	f2c2 0e00 	movt	lr, #8192	; 0x2000
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	f44f 466d 	mov.w	r6, #60672	; 0xed00
 8002328:	f2ce 0600 	movt	r6, #57344	; 0xe000
 800232c:	e880 5000 	stmia.w	r0, {ip, lr}
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8002330:	609c      	str	r4, [r3, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8002332:	84dc      	strh	r4, [r3, #38]	; 0x26
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8002334:	635d      	str	r5, [r3, #52]	; 0x34
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002336:	f883 404d 	strb.w	r4, [r3, #77]	; 0x4d
  H_NEXT(&default_heap.header) = NULL;
 800233a:	6094      	str	r4, [r2, #8]
  H_PAGES(&default_heap.header) = 0;
 800233c:	60d4      	str	r4, [r2, #12]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 800233e:	6194      	str	r4, [r2, #24]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002340:	f8c2 9000 	str.w	r9, [r2]
 8002344:	f8c2 a010 	str.w	sl, [r2, #16]
  tqp->prev = (thread_t *)tqp;
 8002348:	f8c2 a014 	str.w	sl, [r2, #20]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800234c:	61d9      	str	r1, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800234e:	6219      	str	r1, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002350:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002352:	605b      	str	r3, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8002354:	669d      	str	r5, [r3, #104]	; 0x68
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8002356:	661c      	str	r4, [r3, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002358:	f883 804e 	strb.w	r8, [r3, #78]	; 0x4e
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800235c:	f883 804c 	strb.w	r8, [r3, #76]	; 0x4c
 8002360:	68f0      	ldr	r0, [r6, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8002366:	f44f 7240 	mov.w	r2, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	4001      	ands	r1, r0
  tp->name      = name;
 800236c:	f243 3554 	movw	r5, #13140	; 0x3354
  reg_value  =  (reg_value                                   |
 8002370:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
  REG_INSERT(tp);
 8002374:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002378:	f103 0e58 	add.w	lr, r3, #88	; 0x58
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 800237c:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8002380:	430a      	orrs	r2, r1
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002382:	f6c0 0500 	movt	r5, #2048	; 0x800

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002386:	f64e 51f0 	movw	r1, #60912	; 0xedf0
  REG_INSERT(tp);
 800238a:	6118      	str	r0, [r3, #16]
 800238c:	6158      	str	r0, [r3, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800238e:	6198      	str	r0, [r3, #24]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8002390:	665c      	str	r4, [r3, #100]	; 0x64
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002392:	63db      	str	r3, [r3, #60]	; 0x3c
 8002394:	641b      	str	r3, [r3, #64]	; 0x40
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002396:	649c      	str	r4, [r3, #72]	; 0x48
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002398:	645d      	str	r5, [r3, #68]	; 0x44
 800239a:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800239e:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 80023a2:	f8c3 e05c 	str.w	lr, [r3, #92]	; 0x5c
 80023a6:	f2ce 0100 	movt	r1, #57344	; 0xe000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80023aa:	60f2      	str	r2, [r6, #12]
 80023ac:	68ca      	ldr	r2, [r1, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80023b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023b6:	60ca      	str	r2, [r1, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80023b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80023bc:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	2110      	movs	r1, #16
 80023c0:	ea40 0008 	orr.w	r0, r0, r8
 80023c4:	2220      	movs	r2, #32
 80023c6:	6018      	str	r0, [r3, #0]
 80023c8:	77f1      	strb	r1, [r6, #31]
 80023ca:	f886 2022 	strb.w	r2, [r6, #34]	; 0x22
 80023ce:	f384 8811 	msr	BASEPRI, r4
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023d2:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80023d4:	2320      	movs	r3, #32
 80023d6:	f383 8811 	msr	BASEPRI, r3
  REG_INSERT(tp);
 80023da:	f640 240c 	movw	r4, #2572	; 0xa0c
 80023de:	f2c2 0400 	movt	r4, #8192	; 0x2000
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80023e2:	f640 4310 	movw	r3, #3088	; 0xc10
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80023e6:	f241 2eb1 	movw	lr, #4785	; 0x12b1
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80023ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80023ee:	f8d4 c014 	ldr.w	ip, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 80023f2:	2101      	movs	r1, #1
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80023f4:	f6c0 0e00 	movt	lr, #2048	; 0x800
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80023f8:	f243 306c 	movw	r0, #13164	; 0x336c
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80023fc:	f240 2665 	movw	r6, #613	; 0x265
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002400:	f103 0290 	add.w	r2, r3, #144	; 0x90
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002404:	2500      	movs	r5, #0
 8002406:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800240a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 800240e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002412:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002416:	f103 096c 	add.w	r9, r3, #108	; 0x6c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800241a:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 800241e:	f103 0eb8 	add.w	lr, r3, #184	; 0xb8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8002422:	f04f 0802 	mov.w	r8, #2
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002426:	f6c0 0000 	movt	r0, #2048	; 0x800
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800242a:	f6c0 0600 	movt	r6, #2048	; 0x800
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800242e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  REG_INSERT(tp);
 8002432:	f8c3 c0a4 	str.w	ip, [r3, #164]	; 0xa4
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002436:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800243a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800243e:	f8c3 909c 	str.w	r9, [r3, #156]	; 0x9c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8002442:	f883 80b0 	strb.w	r8, [r3, #176]	; 0xb0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002446:	671d      	str	r5, [r3, #112]	; 0x70
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002448:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 800244c:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8002450:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002454:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8002458:	4610      	mov	r0, r2
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800245a:	f8cc 2010 	str.w	r2, [ip, #16]
 800245e:	f8c3 e0b8 	str.w	lr, [r3, #184]	; 0xb8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002462:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 8002466:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 800246a:	6162      	str	r2, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 800246c:	f7ff fd60 	bl	8001f30 <chSchWakeupS.constprop.17>
 8002470:	f385 8811 	msr	BASEPRI, r5
   */
  halInit();
  chSysInit();

	/*Pin Config*/
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT);
 8002474:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002478:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800247c:	2101      	movs	r1, #1
 800247e:	2202      	movs	r2, #2
 8002480:	f7ff fe06 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT);
 8002484:	2102      	movs	r1, #2
 8002486:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800248a:	460a      	mov	r2, r1
 800248c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002490:	f7ff fdfe 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_OUTPUT_PUSHPULL);
 8002494:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002498:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800249c:	2104      	movs	r1, #4
 800249e:	2206      	movs	r2, #6
 80024a0:	f7ff fdf6 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_OUTPUT_PUSHPULL);
 80024a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024a8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80024ac:	2108      	movs	r1, #8
 80024ae:	2206      	movs	r2, #6
 80024b0:	f7ff fdee 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_OUTPUT_PUSHPULL);
 80024b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024b8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80024bc:	2110      	movs	r1, #16
 80024be:	2206      	movs	r2, #6
 80024c0:	f7ff fde6 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_PULLDOWN);
 80024c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024c8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80024cc:	2120      	movs	r1, #32
 80024ce:	2204      	movs	r2, #4
 80024d0:	f7ff fdde 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_PULLDOWN);
 80024d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024d8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	2204      	movs	r2, #4
 80024e0:	f7ff fdd6 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT_PULLDOWN);
 80024e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024e8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	2204      	movs	r2, #4
 80024f0:	f7ff fdce 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL); // pwm
 80024f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024f8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80024fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002500:	2206      	movs	r2, #6
 8002502:	f7ff fdc5 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_OUTPUT_PUSHPULL); // digital
 8002506:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800250a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800250e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002512:	2206      	movs	r2, #6
 8002514:	f7ff fdbc 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_OUTPUT_PUSHPULL);
 8002518:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800251c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	2206      	movs	r2, #6
 8002526:	f7ff fdb3 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 11, PAL_MODE_OUTPUT_PUSHPULL);
 800252a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800252e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002536:	2206      	movs	r2, #6
 8002538:	f7ff fdaa 	bl	8002090 <_pal_lld_setgroupmode>

	/*PWM*/
	palSetPadMode(GPIOB, 11, PAL_MODE_OUTPUT_PUSHPULL);
 800253c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002540:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002548:	2206      	movs	r2, #6
 800254a:	f7ff fda1 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_OUTPUT_PUSHPULL);
 800254e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002552:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800255a:	2206      	movs	r2, #6
 800255c:	f7ff fd98 	bl	8002090 <_pal_lld_setgroupmode>

	/*Direccion */
	palSetPadMode(GPIOB, 10, PAL_MODE_OUTPUT_PUSHPULL);
 8002560:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002564:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800256c:	2206      	movs	r2, #6
 800256e:	f7ff fd8f 	bl	8002090 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_OUTPUT_PUSHPULL);
 8002572:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002576:	2206      	movs	r2, #6
 8002578:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800257c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002580:	f7ff fd86 	bl	8002090 <_pal_lld_setgroupmode>


	/*PWM_Motor start*/
	pwmStart(&PWMD1, &pwmcfg1);
 8002584:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002588:	f640 0134 	movw	r1, #2100	; 0x834
 800258c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002590:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002594:	f7ff fbdc 	bl	8001d50 <pwmStart>
	pwmEnablePeriodicNotification(&PWMD1);
 8002598:	f640 207c 	movw	r0, #2684	; 0xa7c
 800259c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025a0:	f7ff fd5e 	bl	8002060 <pwmEnablePeriodicNotification>
	pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); //10000/5000 = 50 %
 80025a4:	f640 207c 	movw	r0, #2684	; 0xa7c
 80025a8:	2100      	movs	r1, #0
 80025aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025ae:	f7ff fd2f 	bl	8002010 <pwmEnableChannel.constprop.5>
	pwmEnableChannelNotification(&PWMD1, 0);
 80025b2:	f640 207c 	movw	r0, #2684	; 0xa7c
 80025b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025ba:	f7ff fd39 	bl	8002030 <pwmEnableChannelNotification.constprop.3>
  
	pwmStart(&PWMD3, &pwmcfg);
 80025be:	f640 2098 	movw	r0, #2712	; 0xa98
 80025c2:	f640 0100 	movw	r1, #2048	; 0x800
 80025c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80025ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025ce:	f7ff fbbf 	bl	8001d50 <pwmStart>
	pwmEnablePeriodicNotification(&PWMD3);
 80025d2:	f640 2098 	movw	r0, #2712	; 0xa98
 80025d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025da:	f7ff fd41 	bl	8002060 <pwmEnablePeriodicNotification>
	pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 80025de:	f640 2098 	movw	r0, #2712	; 0xa98
 80025e2:	2100      	movs	r1, #0
 80025e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025e8:	f7ff fd12 	bl	8002010 <pwmEnableChannel.constprop.5>
	pwmEnableChannelNotification(&PWMD3, 0);
 80025ec:	f640 2098 	movw	r0, #2712	; 0xa98
 80025f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025f4:	f7ff fd1c 	bl	8002030 <pwmEnableChannelNotification.constprop.3>
 80025f8:	2320      	movs	r3, #32
 80025fa:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80025fe:	f640 02f0 	movw	r2, #2288	; 0x8f0
 8002602:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002606:	7a13      	ldrb	r3, [r2, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d113      	bne.n	8002634 <main+0x534>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 800260c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002610:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002614:	69c8      	ldr	r0, [r1, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002616:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800261a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800261e:	f440 3e00 	orr.w	lr, r0, #131072	; 0x20000
 8002622:	25c0      	movs	r5, #192	; 0xc0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002624:	2040      	movs	r0, #64	; 0x40
 8002626:	f8c1 e01c 	str.w	lr, [r1, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800262a:	f883 5326 	strb.w	r5, [r3, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800262e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002632:	6058      	str	r0, [r3, #4]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8002634:	6f53      	ldr	r3, [r2, #116]	; 0x74
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8002636:	f240 2171 	movw	r1, #625	; 0x271
 800263a:	6099      	str	r1, [r3, #8]
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800263c:	2540      	movs	r5, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800263e:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002640:	f242 1e2c 	movw	lr, #8492	; 0x212c
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8002644:	2100      	movs	r1, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002646:	611d      	str	r5, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002648:	6158      	str	r0, [r3, #20]
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
    sdp->rxmask = 0x7F;
  }
  else {
    sdp->rxmask = 0xFF;
 800264a:	25ff      	movs	r5, #255	; 0xff
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800264c:	f8c3 e00c 	str.w	lr, [r3, #12]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8002650:	2002      	movs	r0, #2
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8002652:	6019      	str	r1, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002654:	f8d3 e000 	ldr.w	lr, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 8002658:	685b      	ldr	r3, [r3, #4]
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
    sdp->rxmask = 0x7F;
  }
  else {
    sdp->rxmask = 0xFF;
 800265a:	f882 5078 	strb.w	r5, [r2, #120]	; 0x78
 800265e:	7210      	strb	r0, [r2, #8]
 8002660:	f381 8811 	msr	BASEPRI, r1
 8002664:	2320      	movs	r3, #32
 8002666:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 800266a:	f640 23c0 	movw	r3, #2752	; 0xac0
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800266e:	f243 3174 	movw	r1, #13172	; 0x3374
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8002672:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002676:	f8d4 e014 	ldr.w	lr, [r4, #20]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800267a:	f6c0 0100 	movt	r1, #2048	; 0x800
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800267e:	f641 60f1 	movw	r0, #7921	; 0x1ef1
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002682:	f503 7280 	add.w	r2, r3, #256	; 0x100
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002686:	2500      	movs	r5, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8002688:	f04f 0c81 	mov.w	ip, #129	; 0x81
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800268c:	f8c3 60fc 	str.w	r6, [r3, #252]	; 0xfc
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8002690:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002694:	f103 0adc 	add.w	sl, r3, #220	; 0xdc
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002698:	f503 7196 	add.w	r1, r3, #300	; 0x12c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 800269c:	f503 7694 	add.w	r6, r3, #296	; 0x128
 80026a0:	f6c0 0000 	movt	r0, #2048	; 0x800
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80026a4:	f04f 0902 	mov.w	r9, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80026a8:	f04f 0801 	mov.w	r8, #1
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80026ac:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80026b0:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80026b4:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80026b8:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80026bc:	f883 9120 	strb.w	r9, [r3, #288]	; 0x120
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80026c0:	f883 8122 	strb.w	r8, [r3, #290]	; 0x122
  tp->name      = name;
  REG_INSERT(tp);
 80026c4:	f8c3 e114 	str.w	lr, [r3, #276]	; 0x114
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80026c8:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80026cc:	f883 5121 	strb.w	r5, [r3, #289]	; 0x121
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80026d0:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80026d4:	f8c3 5134 	str.w	r5, [r3, #308]	; 0x134
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 80026d8:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80026dc:	f8c3 c13c 	str.w	ip, [r3, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80026e0:	4610      	mov	r0, r2
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80026e2:	f8ce 2010 	str.w	r2, [lr, #16]
 80026e6:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80026ea:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 80026ee:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
 80026f2:	6162      	str	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80026f4:	f7ff fc1c 	bl	8001f30 <chSchWakeupS.constprop.17>
 80026f8:	f385 8811 	msr	BASEPRI, r5
 80026fc:	f640 2308 	movw	r3, #2568	; 0xa08
 8002700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002704:	9309      	str	r3, [sp, #36]	; 0x24
 8002706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002708:	f640 4b08 	movw	fp, #3080	; 0xc08
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f640 0368 	movw	r3, #2152	; 0x868
 8002712:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8002716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800271a:	f640 0670 	movw	r6, #2160	; 0x870
 800271e:	f8cd b01c 	str.w	fp, [sp, #28]
 8002722:	9303      	str	r3, [sp, #12]
 8002724:	f640 4be8 	movw	fp, #3304	; 0xce8
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(1000);
		//Left
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8002728:	f241 7359 	movw	r3, #5977	; 0x1759
 800272c:	f640 450c 	movw	r5, #3084	; 0xc0c
 8002730:	f2c2 0600 	movt	r6, #8192	; 0x2000
	
	if((PosCx == PosFx) && (PosCy != PosFy)){
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
 8002734:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8002738:	f2c2 0b00 	movt	fp, #8192	; 0x2000
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(1000);
		//Left
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 800273c:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
 8002740:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002744:	f8cd b014 	str.w	fp, [sp, #20]
	
	if((PosCx == PosFx) && (PosCy != PosFy)){
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
 8002748:	f2c4 0401 	movt	r4, #16385	; 0x4001
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(1000);
		//Left
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 800274c:	9308      	str	r3, [sp, #32]
 800274e:	46b0      	mov	r8, r6
   * pressed the test procedure is launched.
   */

while(true){

while(table==0){
 8002750:	2a00      	cmp	r2, #0
 8002752:	f000 81ee 	beq.w	8002b32 <main+0xa32>
 8002756:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800275a:	46c3      	mov	fp, r8
		break;
	}

}

while ((PosCx != PosFx) || (PosCy != PosFy)) {
 800275c:	9e05      	ldr	r6, [sp, #20]
 800275e:	9b07      	ldr	r3, [sp, #28]
 8002760:	6831      	ldr	r1, [r6, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4291      	cmp	r1, r2
 8002766:	f000 826a 	beq.w	8002c3e <main+0xb3e>
}
	}
	
	if(PosCx != PosFx){

			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){	
 800276a:	68a2      	ldr	r2, [r4, #8]
 800276c:	07d0      	lsls	r0, r2, #31
 800276e:	d402      	bmi.n	8002776 <main+0x676>
 8002770:	68a2      	ldr	r2, [r4, #8]
 8002772:	0791      	lsls	r1, r2, #30
 8002774:	d53e      	bpl.n	80027f4 <main+0x6f4>
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002776:	f640 207c 	movw	r0, #2684	; 0xa7c
 800277a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800277e:	2100      	movs	r1, #0
 8002780:	f7ff fc46 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002784:	f640 2098 	movw	r0, #2712	; 0xa98
 8002788:	2100      	movs	r1, #0
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 800278a:	f44f 6600 	mov.w	r6, #2048	; 0x800
	if(PosCx != PosFx){

			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){	
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800278e:	f2c2 0000 	movt	r0, #8192	; 0x2000
				palSetPad(GPIOA,9);
 8002792:	f44f 7800 	mov.w	r8, #512	; 0x200
	if(PosCx != PosFx){

			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){	
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002796:	f7ff fc3b 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 800279a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){	
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
 800279e:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
 80027a2:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 80027a4:	f7ff fb94 	bl	8001ed0 <chThdSleep>

				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	f241 7a70 	movw	sl, #6000	; 0x1770
 80027ae:	fb0a f202 	mul.w	r2, sl, r2
 80027b2:	fba9 0102 	umull	r0, r1, r9, r2
 80027b6:	f640 207c 	movw	r0, #2684	; 0xa7c
 80027ba:	0b49      	lsrs	r1, r1, #13
 80027bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027c0:	f7ff fc26 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 80027c4:	9b06      	ldr	r3, [sp, #24]
 80027c6:	f640 2098 	movw	r0, #2712	; 0xa98
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027d0:	fb0a f202 	mul.w	r2, sl, r2
 80027d4:	fba9 3102 	umull	r3, r1, r9, r2
 80027d8:	0b49      	lsrs	r1, r1, #13
 80027da:	f7ff fc19 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 80027de:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
 80027e2:	f240 50dc 	movw	r0, #1500	; 0x5dc

				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 80027e6:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1500);
 80027e8:	f7ff fb72 	bl	8001ed0 <chThdSleep>
				PosCx=PosCx+1;			
 80027ec:	9e05      	ldr	r6, [sp, #20]
 80027ee:	6832      	ldr	r2, [r6, #0]
 80027f0:	3201      	adds	r2, #1
 80027f2:	6032      	str	r2, [r6, #0]
			}

			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
 80027f4:	68a2      	ldr	r2, [r4, #8]
 80027f6:	07d2      	lsls	r2, r2, #31
 80027f8:	d502      	bpl.n	8002800 <main+0x700>
 80027fa:	68a2      	ldr	r2, [r4, #8]
 80027fc:	0793      	lsls	r3, r2, #30
 80027fe:	d4ad      	bmi.n	800275c <main+0x65c>
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002800:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002804:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002808:	2100      	movs	r1, #0
 800280a:	f7ff fc01 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800280e:	f640 2098 	movw	r0, #2712	; 0xa98
				palSetPad(GPIOA,9);
 8002812:	f44f 7800 	mov.w	r8, #512	; 0x200
				palSetPad(GPIOA,11);
 8002816:	f44f 6600 	mov.w	r6, #2048	; 0x800
			}

			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800281a:	2100      	movs	r1, #0
 800281c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002820:	f7ff fbf6 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8002824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
 8002828:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
 800282c:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 800282e:	f7ff fb4f 	bl	8001ed0 <chThdSleep>

				//Left
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8002838:	fb0a f202 	mul.w	r2, sl, r2
 800283c:	fba9 0102 	umull	r0, r1, r9, r2
 8002840:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002844:	0b49      	lsrs	r1, r1, #13
 8002846:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800284a:	f7ff fbe1 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800284e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002852:	2100      	movs	r1, #0
 8002854:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002858:	f7ff fbda 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 800285c:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(550);
 8002860:	f240 2026 	movw	r0, #550	; 0x226

				//Left
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002864:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(550);
 8002866:	f7ff fb33 	bl	8001ed0 <chThdSleep>
				
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 800286a:	f640 207c 	movw	r0, #2684	; 0xa7c
 800286e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002872:	2100      	movs	r1, #0
 8002874:	f7ff fbcc 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002878:	f640 2098 	movw	r0, #2712	; 0xa98
 800287c:	2100      	movs	r1, #0
 800287e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002882:	f7ff fbc5 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8002886:	4650      	mov	r0, sl
				chThdSleepMilliseconds(550);
				
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
 8002888:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
 800288c:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 800288e:	f7ff fb1f 	bl	8001ed0 <chThdSleep>

				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	f241 7a70 	movw	sl, #6000	; 0x1770
 8002898:	fb0a f202 	mul.w	r2, sl, r2
 800289c:	fba9 3102 	umull	r3, r1, r9, r2
 80028a0:	f640 207c 	movw	r0, #2684	; 0xa7c
 80028a4:	0b49      	lsrs	r1, r1, #13
 80028a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028aa:	f7ff fbb1 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 80028ae:	9b06      	ldr	r3, [sp, #24]
 80028b0:	f640 2098 	movw	r0, #2712	; 0xa98
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028ba:	fb0a f202 	mul.w	r2, sl, r2
 80028be:	fba9 3102 	umull	r3, r1, r9, r2
 80028c2:	0b49      	lsrs	r1, r1, #13
 80028c4:	f7ff fba4 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 80028c8:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
 80028cc:	f240 50dc 	movw	r0, #1500	; 0x5dc

				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 80028d0:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1500);
 80028d2:	f7ff fafd 	bl	8001ed0 <chThdSleep>
				PosCy=PosCy+1;
 80028d6:	682a      	ldr	r2, [r5, #0]
 80028d8:	3201      	adds	r2, #1
 80028da:	602a      	str	r2, [r5, #0]
 80028dc:	e73e      	b.n	800275c <main+0x65c>
	}

	
  }
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 80028de:	f640 207c 	movw	r0, #2684	; 0xa7c
 80028e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028e6:	2100      	movs	r1, #0
 80028e8:	f7ff fb92 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 80028ec:	f640 2098 	movw	r0, #2712	; 0xa98
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 80028f0:	f44f 6b00 	mov.w	fp, #2048	; 0x800

	
  }
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 80028f4:	2100      	movs	r1, #0
 80028f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028fa:	46d0      	mov	r8, sl
			palSetPad(GPIOA,9);
 80028fc:	f44f 7a00 	mov.w	sl, #512	; 0x200

	
  }
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002900:	f7ff fb86 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002904:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(5000);
 8002908:	f241 3088 	movw	r0, #5000	; 0x1388
  }
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 800290c:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(5000);
 8002910:	f7ff fade 	bl	8001ed0 <chThdSleep>

			//Left
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800291a:	fb00 f202 	mul.w	r2, r0, r2
 800291e:	9b08      	ldr	r3, [sp, #32]
 8002920:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002924:	fba3 3102 	umull	r3, r1, r3, r2
 8002928:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800292c:	0b49      	lsrs	r1, r1, #13
 800292e:	f7ff fb6f 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002932:	f640 2098 	movw	r0, #2712	; 0xa98
 8002936:	2100      	movs	r1, #0
 8002938:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800293c:	f7ff fb68 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002940:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(550);
 8002944:	f240 2026 	movw	r0, #550	; 0x226

			//Left
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002948:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(550);
 800294c:	f7ff fac0 	bl	8001ed0 <chThdSleep>
			
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002950:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002954:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002958:	2100      	movs	r1, #0
 800295a:	f7ff fb59 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800295e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002962:	2100      	movs	r1, #0
 8002964:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002968:	f7ff fb52 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 800296c:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(1000);
 8002970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002974:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(1000);
 8002978:	f7ff faaa 	bl	8001ed0 <chThdSleep>

			//Advance
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	f241 7070 	movw	r0, #6000	; 0x1770
 8002982:	fb00 f202 	mul.w	r2, r0, r2
 8002986:	9b08      	ldr	r3, [sp, #32]
 8002988:	f640 207c 	movw	r0, #2684	; 0xa7c
 800298c:	fba3 3102 	umull	r3, r1, r3, r2
 8002990:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002994:	0b49      	lsrs	r1, r1, #13
 8002996:	f7ff fb3b 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 800299a:	9b06      	ldr	r3, [sp, #24]
 800299c:	f241 7170 	movw	r1, #6000	; 0x1770
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	9b08      	ldr	r3, [sp, #32]
 80029a4:	fb01 f202 	mul.w	r2, r1, r2
 80029a8:	fba3 3102 	umull	r3, r1, r3, r2
 80029ac:	f640 2098 	movw	r0, #2712	; 0xa98
 80029b0:	0b49      	lsrs	r1, r1, #13
 80029b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029b6:	f7ff fb2b 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 80029ba:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);	
 80029be:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(1500*PosFy);
 80029c2:	6830      	ldr	r0, [r6, #0]
 80029c4:	f24e 3960 	movw	r9, #58208	; 0xe360
 80029c8:	f2c0 0916 	movt	r9, #22
 80029cc:	fb09 f000 	mul.w	r0, r9, r0
 80029d0:	f644 56d3 	movw	r6, #19923	; 0x4dd3
 80029d4:	f2c1 0662 	movt	r6, #4194	; 0x1062
 80029d8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 80029dc:	fba6 1000 	umull	r1, r0, r6, r0
 80029e0:	f3c0 108f 	ubfx	r0, r0, #6, #16
 80029e4:	f7ff fa74 	bl	8001ed0 <chThdSleep>

			//Right
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 80029e8:	f640 207c 	movw	r0, #2684	; 0xa7c
 80029ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029f0:	2100      	movs	r1, #0
 80029f2:	f7ff fb0d 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
 80029f6:	9b06      	ldr	r3, [sp, #24]
 80029f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	9b08      	ldr	r3, [sp, #32]
 8002a00:	fb01 f202 	mul.w	r2, r1, r2
 8002a04:	fba3 3102 	umull	r3, r1, r3, r2
 8002a08:	f640 2098 	movw	r0, #2712	; 0xa98
 8002a0c:	0b49      	lsrs	r1, r1, #13
 8002a0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a12:	f7ff fafd 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002a16:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(550);
 8002a1a:	f240 2026 	movw	r0, #550	; 0x226

			//Right
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002a1e:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(550);
 8002a22:	f7ff fa55 	bl	8001ed0 <chThdSleep>

			//Advance
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f241 7170 	movw	r1, #6000	; 0x1770
 8002a2c:	fb01 f202 	mul.w	r2, r1, r2
 8002a30:	9b08      	ldr	r3, [sp, #32]
 8002a32:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002a36:	fba3 3102 	umull	r3, r1, r3, r2
 8002a3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a3e:	0b49      	lsrs	r1, r1, #13
 8002a40:	f7ff fae6 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 8002a44:	9b06      	ldr	r3, [sp, #24]
 8002a46:	f241 7170 	movw	r1, #6000	; 0x1770
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	9b08      	ldr	r3, [sp, #32]
 8002a4e:	fb01 f202 	mul.w	r2, r1, r2
 8002a52:	fba3 3102 	umull	r3, r1, r3, r2
 8002a56:	f640 2098 	movw	r0, #2712	; 0xa98
 8002a5a:	0b49      	lsrs	r1, r1, #13
 8002a5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a60:	f7ff fad6 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);	
			chThdSleepMilliseconds(1500*PosFx);
 8002a64:	9b07      	ldr	r3, [sp, #28]
			chThdSleepMilliseconds(550);

			//Advance
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
			palSetPad(GPIOA,9);
 8002a66:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);	
 8002a6a:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(1500*PosFx);
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	fb09 f202 	mul.w	r2, r9, r2
 8002a74:	f202 30e7 	addw	r0, r2, #999	; 0x3e7
 8002a78:	fba6 1000 	umull	r1, r0, r6, r0
 8002a7c:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8002a80:	f7ff fa26 	bl	8001ed0 <chThdSleep>

			//Right
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002a84:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002a88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	f7ff fabf 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
 8002a92:	9b06      	ldr	r3, [sp, #24]
 8002a94:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	9b08      	ldr	r3, [sp, #32]
 8002a9c:	fb06 f202 	mul.w	r2, r6, r2
 8002aa0:	fba3 3102 	umull	r3, r1, r3, r2
 8002aa4:	f640 2098 	movw	r0, #2712	; 0xa98
 8002aa8:	0b49      	lsrs	r1, r1, #13
 8002aaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002aae:	f7ff faaf 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002ab2:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(550);
 8002ab6:	f240 2026 	movw	r0, #550	; 0x226

			//Right
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002aba:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(550);
 8002abe:	f7ff fa07 	bl	8001ed0 <chThdSleep>

			//Right
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002ac2:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002aca:	2100      	movs	r1, #0
 8002acc:	f7ff faa0 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
 8002ad0:	9e06      	ldr	r6, [sp, #24]
 8002ad2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ad6:	68b2      	ldr	r2, [r6, #8]
 8002ad8:	9b08      	ldr	r3, [sp, #32]
 8002ada:	fb01 f202 	mul.w	r2, r1, r2
 8002ade:	fba3 3102 	umull	r3, r1, r3, r2
 8002ae2:	f640 2098 	movw	r0, #2712	; 0xa98
 8002ae6:	0b49      	lsrs	r1, r1, #13
 8002ae8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002aec:	f7ff fa90 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002af0:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(550);
 8002af4:	f240 2026 	movw	r0, #550	; 0x226

			//Right
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002af8:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(550);
 8002afc:	f7ff f9e8 	bl	8001ed0 <chThdSleep>

			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002b00:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002b04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f7ff fa81 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002b0e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002b12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b16:	2100      	movs	r1, #0
 8002b18:	f7ff fa7a 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002b1c:	f8c4 a010 	str.w	sl, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(5000);
 8002b20:	f241 3088 	movw	r0, #5000	; 0x1388

			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002b24:	f8c4 b010 	str.w	fp, [r4, #16]
			chThdSleepMilliseconds(5000);
 8002b28:	f7ff f9d2 	bl	8001ed0 <chThdSleep>

			table=0;
 8002b2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002b2e:	2200      	movs	r2, #0
 8002b30:	6032      	str	r2, [r6, #0]

while(true){

while(table==0){

	palWritePad(GPIOA,2,1);
 8002b32:	2204      	movs	r2, #4
 8002b34:	6122      	str	r2, [r4, #16]
		if (palReadPad(GPIOA,5) == TRUE){
 8002b36:	68a2      	ldr	r2, [r4, #8]
			table=1;}
		if (palReadPad(GPIOA,6) == TRUE){
			table=2;}
		if (palReadPad(GPIOA,7) == TRUE){
			table=3;}
	palWritePad(GPIOA,2,0);
 8002b38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
while(true){

while(table==0){

	palWritePad(GPIOA,2,1);
		if (palReadPad(GPIOA,5) == TRUE){
 8002b3c:	0692      	lsls	r2, r2, #26
			table=1;}
 8002b3e:	bf42      	ittt	mi
 8002b40:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
 8002b42:	2201      	movmi	r2, #1
 8002b44:	6032      	strmi	r2, [r6, #0]
		if (palReadPad(GPIOA,6) == TRUE){
 8002b46:	68a2      	ldr	r2, [r4, #8]
 8002b48:	0653      	lsls	r3, r2, #25
			table=2;}
 8002b4a:	bf42      	ittt	mi
 8002b4c:	f8dd b024 	ldrmi.w	fp, [sp, #36]	; 0x24
 8002b50:	2202      	movmi	r2, #2
 8002b52:	f8cb 2000 	strmi.w	r2, [fp]
		if (palReadPad(GPIOA,7) == TRUE){
 8002b56:	68a2      	ldr	r2, [r4, #8]
 8002b58:	0616      	lsls	r6, r2, #24
			table=3;}
 8002b5a:	bf42      	ittt	mi
 8002b5c:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 8002b5e:	2203      	movmi	r2, #3
 8002b60:	601a      	strmi	r2, [r3, #0]
	palWritePad(GPIOA,2,0);
	palWritePad(GPIOA,3,1);
 8002b62:	2208      	movs	r2, #8
			table=1;}
		if (palReadPad(GPIOA,6) == TRUE){
			table=2;}
		if (palReadPad(GPIOA,7) == TRUE){
			table=3;}
	palWritePad(GPIOA,2,0);
 8002b64:	6121      	str	r1, [r4, #16]
	palWritePad(GPIOA,3,1);
 8002b66:	6122      	str	r2, [r4, #16]
		if (palReadPad(GPIOA,5) == TRUE){
 8002b68:	68a2      	ldr	r2, [r4, #8]
 8002b6a:	0690      	lsls	r0, r2, #26
			table=4;}
 8002b6c:	bf42      	ittt	mi
 8002b6e:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
 8002b70:	2204      	movmi	r2, #4
 8002b72:	6032      	strmi	r2, [r6, #0]
		if (palReadPad(GPIOA,6) == TRUE){
 8002b74:	68a2      	ldr	r2, [r4, #8]
 8002b76:	0651      	lsls	r1, r2, #25
			table=5;}
 8002b78:	bf42      	ittt	mi
 8002b7a:	f8dd b024 	ldrmi.w	fp, [sp, #36]	; 0x24
 8002b7e:	2205      	movmi	r2, #5
 8002b80:	f8cb 2000 	strmi.w	r2, [fp]
		if (palReadPad(GPIOA,7) == TRUE){
 8002b84:	68a2      	ldr	r2, [r4, #8]
			table=6;}
	palWritePad(GPIOA,3,0);
 8002b86:	f44f 2100 	mov.w	r1, #524288	; 0x80000
	palWritePad(GPIOA,3,1);
		if (palReadPad(GPIOA,5) == TRUE){
			table=4;}
		if (palReadPad(GPIOA,6) == TRUE){
			table=5;}
		if (palReadPad(GPIOA,7) == TRUE){
 8002b8a:	0612      	lsls	r2, r2, #24
			table=6;}
 8002b8c:	bf42      	ittt	mi
 8002b8e:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 8002b90:	2206      	movmi	r2, #6
 8002b92:	601a      	strmi	r2, [r3, #0]
	palWritePad(GPIOA,3,0);
	palWritePad(GPIOA,4,1);
 8002b94:	2210      	movs	r2, #16
			table=4;}
		if (palReadPad(GPIOA,6) == TRUE){
			table=5;}
		if (palReadPad(GPIOA,7) == TRUE){
			table=6;}
	palWritePad(GPIOA,3,0);
 8002b96:	6121      	str	r1, [r4, #16]
	palWritePad(GPIOA,4,1);
 8002b98:	6122      	str	r2, [r4, #16]
		if (palReadPad(GPIOA,5) == TRUE){
 8002b9a:	68a2      	ldr	r2, [r4, #8]
 8002b9c:	0693      	lsls	r3, r2, #26
			table=7;}
 8002b9e:	bf42      	ittt	mi
 8002ba0:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
 8002ba2:	2207      	movmi	r2, #7
 8002ba4:	6032      	strmi	r2, [r6, #0]
		if (palReadPad(GPIOA,6) == TRUE){
 8002ba6:	68a2      	ldr	r2, [r4, #8]
 8002ba8:	0656      	lsls	r6, r2, #25
 8002baa:	f100 833a 	bmi.w	8003222 <main+0x1122>
 8002bae:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			table=8;}
	palWritePad(GPIOA,4,0);
 8002bb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002bb6:	f8db 2000 	ldr.w	r2, [fp]
 8002bba:	6120      	str	r0, [r4, #16]


	switch(table){
 8002bbc:	1e51      	subs	r1, r2, #1
 8002bbe:	2907      	cmp	r1, #7
 8002bc0:	f63f adc6 	bhi.w	8002750 <main+0x650>
 8002bc4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bc8:	002c0035 	.word	0x002c0035
 8002bcc:	001e0025 	.word	0x001e0025
 8002bd0:	000f0016 	.word	0x000f0016
 8002bd4:	03330008 	.word	0x03330008
			PosFx=6;
			PosFy=4;
		break;

		case 7:
			PosFx=2;
 8002bd8:	9e07      	ldr	r6, [sp, #28]
 8002bda:	2002      	movs	r0, #2
			PosFy=6;
 8002bdc:	2106      	movs	r1, #6
			PosFx=6;
			PosFy=4;
		break;

		case 7:
			PosFx=2;
 8002bde:	6030      	str	r0, [r6, #0]
			PosFy=6;
 8002be0:	f8c8 1000 	str.w	r1, [r8]
 8002be4:	e5b4      	b.n	8002750 <main+0x650>
			PosFx=4;
			PosFy=4;
		break;

		case 6:
			PosFx=6;
 8002be6:	9b07      	ldr	r3, [sp, #28]
 8002be8:	2006      	movs	r0, #6
			PosFy=4;
 8002bea:	2104      	movs	r1, #4
			PosFx=4;
			PosFy=4;
		break;

		case 6:
			PosFx=6;
 8002bec:	6018      	str	r0, [r3, #0]
			PosFy=4;
 8002bee:	f8c8 1000 	str.w	r1, [r8]
 8002bf2:	e5ad      	b.n	8002750 <main+0x650>
			PosFx=2;
			PosFy=4;
		break;

		case 5:
			PosFx=4;
 8002bf4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	f8cb 1000 	str.w	r1, [fp]
			PosFy=4;
 8002bfe:	f8c8 1000 	str.w	r1, [r8]
 8002c02:	e5a5      	b.n	8002750 <main+0x650>
			PosFx=6;
			PosFy=2;
		break;

		case 4:
			PosFx=2;
 8002c04:	9e07      	ldr	r6, [sp, #28]
 8002c06:	2002      	movs	r0, #2
			PosFy=4;
 8002c08:	2104      	movs	r1, #4
			PosFx=6;
			PosFy=2;
		break;

		case 4:
			PosFx=2;
 8002c0a:	6030      	str	r0, [r6, #0]
			PosFy=4;
 8002c0c:	f8c8 1000 	str.w	r1, [r8]
 8002c10:	e59e      	b.n	8002750 <main+0x650>
			PosFx=4;
			PosFy=2;
		break;

		case 3:
			PosFx=6;
 8002c12:	9b07      	ldr	r3, [sp, #28]
 8002c14:	2006      	movs	r0, #6
			PosFy=2;
 8002c16:	2102      	movs	r1, #2
			PosFx=4;
			PosFy=2;
		break;

		case 3:
			PosFx=6;
 8002c18:	6018      	str	r0, [r3, #0]
			PosFy=2;
 8002c1a:	f8c8 1000 	str.w	r1, [r8]
 8002c1e:	e597      	b.n	8002750 <main+0x650>
			PosFx=2;
			PosFy=2;
		break;

		case 2:
			PosFx=4;
 8002c20:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002c24:	2004      	movs	r0, #4
			PosFy=2;
 8002c26:	2102      	movs	r1, #2
			PosFx=2;
			PosFy=2;
		break;

		case 2:
			PosFx=4;
 8002c28:	f8cb 0000 	str.w	r0, [fp]
			PosFy=2;
 8002c2c:	f8c8 1000 	str.w	r1, [r8]
 8002c30:	e58e      	b.n	8002750 <main+0x650>


	switch(table){

		case 1:
			PosFx=2;
 8002c32:	9e07      	ldr	r6, [sp, #28]
 8002c34:	2102      	movs	r1, #2
 8002c36:	6031      	str	r1, [r6, #0]
			PosFy=2;
 8002c38:	f8c8 1000 	str.w	r1, [r8]
 8002c3c:	e588      	b.n	8002750 <main+0x650>
 8002c3e:	46da      	mov	sl, fp
		break;
	}

}

while ((PosCx != PosFx) || (PosCy != PosFy)) {
 8002c40:	6829      	ldr	r1, [r5, #0]
 8002c42:	f8da 2000 	ldr.w	r2, [sl]
 8002c46:	f640 0670 	movw	r6, #2160	; 0x870
 8002c4a:	4291      	cmp	r1, r2
 8002c4c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002c50:	f43f ae45 	beq.w	80028de <main+0x7de>
	
	if((PosCx == PosFx) && (PosCy != PosFy)){
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002c54:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002c58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f7ff f9d7 	bl	8002010 <pwmEnableChannel.constprop.5>
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002c62:	f640 2098 	movw	r0, #2712	; 0xa98
 8002c66:	2100      	movs	r1, #0
		palSetPad(GPIOA,9);
 8002c68:	f44f 7800 	mov.w	r8, #512	; 0x200
		palSetPad(GPIOA,11);
 8002c6c:	f44f 6600 	mov.w	r6, #2048	; 0x800
while ((PosCx != PosFx) || (PosCy != PosFy)) {
	
	if((PosCx == PosFx) && (PosCy != PosFy)){
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002c70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c74:	f7ff f9cc 	bl	8002010 <pwmEnableChannel.constprop.5>
		palSetPad(GPIOA,9);
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(1000);
 8002c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	
	if((PosCx == PosFx) && (PosCy != PosFy)){
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
 8002c7c:	f8c4 8010 	str.w	r8, [r4, #16]
		palSetPad(GPIOA,11);
 8002c80:	6126      	str	r6, [r4, #16]
		chThdSleepMilliseconds(1000);
 8002c82:	f7ff f925 	bl	8001ed0 <chThdSleep>
		//Left
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 8002c8c:	fb0b f202 	mul.w	r2, fp, r2
 8002c90:	fba9 0102 	umull	r0, r1, r9, r2
 8002c94:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002c98:	0b49      	lsrs	r1, r1, #13
 8002c9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c9e:	f7ff f9b7 	bl	8002010 <pwmEnableChannel.constprop.5>
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002ca2:	f640 2098 	movw	r0, #2712	; 0xa98
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cac:	f7ff f9b0 	bl	8002010 <pwmEnableChannel.constprop.5>
		palSetPad(GPIOA,9);
 8002cb0:	f8c4 8010 	str.w	r8, [r4, #16]
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(550);
 8002cb4:	f240 2026 	movw	r0, #550	; 0x226
		chThdSleepMilliseconds(1000);
		//Left
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
		palSetPad(GPIOA,11);
 8002cb8:	6126      	str	r6, [r4, #16]
		chThdSleepMilliseconds(550);
 8002cba:	f7ff f909 	bl	8001ed0 <chThdSleep>
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002cbe:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002cc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f7ff f9a2 	bl	8002010 <pwmEnableChannel.constprop.5>
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002ccc:	f640 2098 	movw	r0, #2712	; 0xa98
 8002cd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f7ff f99b 	bl	8002010 <pwmEnableChannel.constprop.5>
		palSetPad(GPIOA,9);
 8002cda:	f8c4 8010 	str.w	r8, [r4, #16]
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(1000);
 8002cde:	4658      	mov	r0, fp
		chThdSleepMilliseconds(550);
		//Stop 
		pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
		palSetPad(GPIOA,11);
 8002ce0:	6126      	str	r6, [r4, #16]
		chThdSleepMilliseconds(1000);
 8002ce2:	f7ff f8f5 	bl	8001ed0 <chThdSleep>
 8002ce6:	9a03      	ldr	r2, [sp, #12]
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	9204      	str	r2, [sp, #16]
		
		while (s){
 8002cec:	9a04      	ldr	r2, [sp, #16]
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	f000 80d1 	beq.w	8002e96 <main+0xd96>
		if(PosCy == PosFy){
 8002cf4:	682a      	ldr	r2, [r5, #0]
 8002cf6:	f8da 3000 	ldr.w	r3, [sl]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d070      	beq.n	8002de0 <main+0xce0>

			s=false;
		}
		
		if(PosCy != PosFy){
			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){
 8002cfe:	68a1      	ldr	r1, [r4, #8]
 8002d00:	07c8      	lsls	r0, r1, #31
 8002d02:	d402      	bmi.n	8002d0a <main+0xc0a>
 8002d04:	68a1      	ldr	r1, [r4, #8]
 8002d06:	0789      	lsls	r1, r1, #30
 8002d08:	d559      	bpl.n	8002dbe <main+0xcbe>
				
				if((PosCy+1) == PosFy){
 8002d0a:	3201      	adds	r2, #1
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	f000 81c0 	beq.w	8003092 <main+0xf92>
				chThdSleepMilliseconds(1000);
				
				s=false;
				}

				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
 8002d12:	682a      	ldr	r2, [r5, #0]
 8002d14:	f8da 3000 	ldr.w	r3, [sl]
 8002d18:	3201      	adds	r2, #1
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d03f      	beq.n	8002d9e <main+0xc9e>
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f241 7670 	movw	r6, #6000	; 0x1770
 8002d24:	fb06 f303 	mul.w	r3, r6, r3
 8002d28:	fba9 b103 	umull	fp, r1, r9, r3
 8002d2c:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002d30:	0b49      	lsrs	r1, r1, #13
 8002d32:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d36:	f7ff f96b 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 8002d3a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002d3e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002d42:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002d46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d4a:	fb06 f303 	mul.w	r3, r6, r3
 8002d4e:	fba9 2103 	umull	r2, r1, r9, r3
				palSetPad(GPIOA,9);
 8002d52:	f44f 7800 	mov.w	r8, #512	; 0x200
				}

				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 8002d56:	0b49      	lsrs	r1, r1, #13
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 8002d58:	f44f 6600 	mov.w	r6, #2048	; 0x800
				}

				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 8002d5c:	f7ff f958 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002d60:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
 8002d64:	f240 50dc 	movw	r0, #1500	; 0x5dc
				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 8002d68:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1500);
 8002d6a:	f7ff f8b1 	bl	8001ed0 <chThdSleep>
				PosCy=PosCy+1;
 8002d6e:	682b      	ldr	r3, [r5, #0]
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002d70:	f640 207c 	movw	r0, #2684	; 0xa7c
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCy=PosCy+1;
 8002d74:	3301      	adds	r3, #1
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002d76:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d7a:	2100      	movs	r1, #0
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCy=PosCy+1;
 8002d7c:	602b      	str	r3, [r5, #0]
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002d7e:	f7ff f947 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002d82:	f640 2098 	movw	r0, #2712	; 0xa98
 8002d86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f7ff f940 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002d90:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8002d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				PosCy=PosCy+1;
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002d98:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 8002d9a:	f7ff f899 	bl	8001ed0 <chThdSleep>
				}

				if((PosCx>PosFx) && (PosCy==PosFy)){
 8002d9e:	9b05      	ldr	r3, [sp, #20]
 8002da0:	9e07      	ldr	r6, [sp, #28]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	6833      	ldr	r3, [r6, #0]
 8002da6:	f640 46e8 	movw	r6, #3304	; 0xce8
 8002daa:	429a      	cmp	r2, r3
 8002dac:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002db0:	dd05      	ble.n	8002dbe <main+0xcbe>
 8002db2:	682a      	ldr	r2, [r5, #0]
 8002db4:	f8da 3000 	ldr.w	r3, [sl]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	f000 81b8 	beq.w	800312e <main+0x102e>
							s=false;
				}
				
			}
			
			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	07db      	lsls	r3, r3, #31
 8002dc2:	d571      	bpl.n	8002ea8 <main+0xda8>
 8002dc4:	68a3      	ldr	r3, [r4, #8]
 8002dc6:	079e      	lsls	r6, r3, #30
 8002dc8:	d56e      	bpl.n	8002ea8 <main+0xda8>
 8002dca:	9e03      	ldr	r6, [sp, #12]
 8002dcc:	7836      	ldrb	r6, [r6, #0]
 8002dce:	9604      	str	r6, [sp, #16]
		pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
		palSetPad(GPIOA,9);
		palSetPad(GPIOA,11);
		chThdSleepMilliseconds(1000);
		
		while (s){
 8002dd0:	9a04      	ldr	r2, [sp, #16]
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	d05f      	beq.n	8002e96 <main+0xd96>
		if(PosCy == PosFy){
 8002dd6:	682a      	ldr	r2, [r5, #0]
 8002dd8:	f8da 3000 	ldr.w	r3, [sl]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d18e      	bne.n	8002cfe <main+0xbfe>
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002de0:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002de8:	2100      	movs	r1, #0
 8002dea:	f7ff f911 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002dee:	f640 2098 	movw	r0, #2712	; 0xa98
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002df2:	f44f 6600 	mov.w	r6, #2048	; 0x800
		
		while (s){
		if(PosCy == PosFy){
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002df6:	2100      	movs	r1, #0
			palSetPad(GPIOA,9);
 8002df8:	f44f 7800 	mov.w	r8, #512	; 0x200
		
		while (s){
		if(PosCy == PosFy){
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e00:	f7ff f906 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(1000);
 8002e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		while (s){
		if(PosCy == PosFy){
			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
 8002e08:	f8c4 8010 	str.w	r8, [r4, #16]
			palSetPad(GPIOA,11);
 8002e0c:	6126      	str	r6, [r4, #16]
			chThdSleepMilliseconds(1000);
 8002e0e:	f7ff f85f 	bl	8001ed0 <chThdSleep>

			//Left
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 8002e18:	fb0b f303 	mul.w	r3, fp, r3
 8002e1c:	fba9 0103 	umull	r0, r1, r9, r3
 8002e20:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002e24:	0b49      	lsrs	r1, r1, #13
 8002e26:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e2a:	f7ff f8f1 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002e2e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002e32:	2100      	movs	r1, #0
 8002e34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e38:	f7ff f8ea 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002e3c:	f8c4 8010 	str.w	r8, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(550);
 8002e40:	f240 2026 	movw	r0, #550	; 0x226

			//Left
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002e44:	6126      	str	r6, [r4, #16]
			chThdSleepMilliseconds(550);
 8002e46:	f7ff f843 	bl	8001ed0 <chThdSleep>

			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002e4a:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002e4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e52:	2100      	movs	r1, #0
 8002e54:	f7ff f8dc 	bl	8002010 <pwmEnableChannel.constprop.5>
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002e58:	f640 2098 	movw	r0, #2712	; 0xa98
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e62:	f7ff f8d5 	bl	8002010 <pwmEnableChannel.constprop.5>
			palSetPad(GPIOA,9);
 8002e66:	f8c4 8010 	str.w	r8, [r4, #16]
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(1000);
 8002e6a:	4658      	mov	r0, fp

			//Stop 
			pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
 8002e6c:	6126      	str	r6, [r4, #16]
			chThdSleepMilliseconds(1000);
 8002e6e:	f7ff f82f 	bl	8001ed0 <chThdSleep>

			s=false;
		}
		
		if(PosCy != PosFy){
 8002e72:	f640 0670 	movw	r6, #2160	; 0x870
 8002e76:	f640 410c 	movw	r1, #3084	; 0xc0c
 8002e7a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002e7e:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002e82:	680a      	ldr	r2, [r1, #0]
 8002e84:	6833      	ldr	r3, [r6, #0]
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(1000);

			s=false;
 8002e86:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002e8a:	2100      	movs	r1, #0
		}
		
		if(PosCy != PosFy){
 8002e8c:	429a      	cmp	r2, r3
			pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
			palSetPad(GPIOA,9);
			palSetPad(GPIOA,11);
			chThdSleepMilliseconds(1000);

			s=false;
 8002e8e:	f88b 1000 	strb.w	r1, [fp]
		}
		
		if(PosCy != PosFy){
 8002e92:	f47f af34 	bne.w	8002cfe <main+0xbfe>
			}
		}
}
	}
	
	if(PosCx != PosFx){
 8002e96:	9b05      	ldr	r3, [sp, #20]
 8002e98:	9e07      	ldr	r6, [sp, #28]
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	6832      	ldr	r2, [r6, #0]
 8002e9e:	4291      	cmp	r1, r2
 8002ea0:	f43f aece 	beq.w	8002c40 <main+0xb40>
 8002ea4:	46d3      	mov	fp, sl
 8002ea6:	e460      	b.n	800276a <main+0x66a>
				
			}
			
			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002ea8:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002eac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f7ff f8ad 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002eb6:	f640 2098 	movw	r0, #2712	; 0xa98
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002eba:	f44f 6600 	mov.w	r6, #2048	; 0x800
			
			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
 8002ebe:	f44f 7800 	mov.w	r8, #512	; 0x200
			}
			
			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ec8:	f7ff f8a2 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002ecc:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8002ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			if ((palReadPad(GPIOA,0) == FALSE) || (palReadPad(GPIOA,1) == FALSE)){
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002ed4:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 8002ed6:	f7fe fffb 	bl	8001ed0 <chThdSleep>

				//Right
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002eda:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002ede:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f7ff f894 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
 8002ee8:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002eec:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002ef0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 8002ef4:	fb0b f303 	mul.w	r3, fp, r3
 8002ef8:	fba9 0103 	umull	r0, r1, r9, r3
 8002efc:	f640 2098 	movw	r0, #2712	; 0xa98
 8002f00:	0b49      	lsrs	r1, r1, #13
 8002f02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f06:	f7ff f883 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002f0a:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(550);	
 8002f0e:	f240 2026 	movw	r0, #550	; 0x226

				//Right
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 1000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002f12:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(550);	
 8002f14:	f7fe ffdc 	bl	8001ed0 <chThdSleep>

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002f18:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002f1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f20:	2100      	movs	r1, #0
 8002f22:	f7ff f875 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002f26:	f640 2098 	movw	r0, #2712	; 0xa98
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f30:	f7ff f86e 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8002f34:	4658      	mov	r0, fp
				chThdSleepMilliseconds(550);	

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
 8002f36:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
 8002f3a:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 8002f3c:	f7fe ffc8 	bl	8001ed0 <chThdSleep>

				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	f241 7370 	movw	r3, #6000	; 0x1770
 8002f46:	fb03 f202 	mul.w	r2, r3, r2
 8002f4a:	fba9 0102 	umull	r0, r1, r9, r2
 8002f4e:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002f52:	0b49      	lsrs	r1, r1, #13
 8002f54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	f7ff f859 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 8002f5e:	9906      	ldr	r1, [sp, #24]
 8002f60:	9b01      	ldr	r3, [sp, #4]
 8002f62:	688a      	ldr	r2, [r1, #8]
 8002f64:	f640 2098 	movw	r0, #2712	; 0xa98
 8002f68:	fb03 f302 	mul.w	r3, r3, r2
 8002f6c:	fba9 2103 	umull	r2, r1, r9, r3
 8002f70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002f74:	0b49      	lsrs	r1, r1, #13
 8002f76:	f7ff f84b 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002f7a:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
 8002f7e:	f240 50dc 	movw	r0, #1500	; 0x5dc

				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 8002f82:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1500);
 8002f84:	f7fe ffa4 	bl	8001ed0 <chThdSleep>
				PosCx=PosCx+1;
 8002f88:	9a05      	ldr	r2, [sp, #20]

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002f8a:	f640 207c 	movw	r0, #2684	; 0xa7c
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCx=PosCx+1;
 8002f8e:	6813      	ldr	r3, [r2, #0]

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002f90:	f2c2 0000 	movt	r0, #8192	; 0x2000
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCx=PosCx+1;
 8002f94:	3301      	adds	r3, #1

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002f96:	2100      	movs	r1, #0
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCx=PosCx+1;
 8002f98:	6013      	str	r3, [r2, #0]

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002f9a:	f7ff f839 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002f9e:	f640 2098 	movw	r0, #2712	; 0xa98
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fa8:	f7ff f832 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002fac:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8002fb0:	4658      	mov	r0, fp

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002fb2:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 8002fb4:	f7fe ff8c 	bl	8001ed0 <chThdSleep>

				//Left
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002fbe:	fb0b f303 	mul.w	r3, fp, r3
 8002fc2:	fba9 2103 	umull	r2, r1, r9, r3
 8002fc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fca:	0b49      	lsrs	r1, r1, #13
 8002fcc:	f7ff f820 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002fd0:	f640 2098 	movw	r0, #2712	; 0xa98
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fda:	f7ff f819 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8002fde:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(550);
 8002fe2:	f240 2026 	movw	r0, #550	; 0x226

				//Left
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8002fe6:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(550);
 8002fe8:	f7fe ff72 	bl	8001ed0 <chThdSleep>

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8002fec:	f640 207c 	movw	r0, #2684	; 0xa7c
 8002ff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f7ff f80b 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8002ffa:	f640 2098 	movw	r0, #2712	; 0xa98
 8002ffe:	2100      	movs	r1, #0
 8003000:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003004:	f7ff f804 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8003008:	4658      	mov	r0, fp
				chThdSleepMilliseconds(550);

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
 800300a:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
 800300e:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 8003010:	f7fe ff5e 	bl	8001ed0 <chThdSleep>
				
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 5000)); 
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	f241 3388 	movw	r3, #5000	; 0x1388
 800301a:	fb03 f202 	mul.w	r2, r3, r2
 800301e:	fba9 0102 	umull	r0, r1, r9, r2
 8003022:	f640 207c 	movw	r0, #2684	; 0xa7c
 8003026:	0b49      	lsrs	r1, r1, #13
 8003028:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f7fe ffef 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 5000));
 8003032:	9906      	ldr	r1, [sp, #24]
 8003034:	9b01      	ldr	r3, [sp, #4]
 8003036:	688a      	ldr	r2, [r1, #8]
 8003038:	f640 2098 	movw	r0, #2712	; 0xa98
 800303c:	fb03 f302 	mul.w	r3, r3, r2
 8003040:	fba9 2103 	umull	r2, r1, r9, r3
 8003044:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003048:	0b49      	lsrs	r1, r1, #13
 800304a:	f7fe ffe1 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 800304e:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
 8003052:	f240 50dc 	movw	r0, #1500	; 0x5dc
				
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 5000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 5000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 8003056:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1500);
 8003058:	f7fe ff3a 	bl	8001ed0 <chThdSleep>
				PosCy=PosCy+1;
 800305c:	682b      	ldr	r3, [r5, #0]

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 800305e:	f640 207c 	movw	r0, #2684	; 0xa7c
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 5000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 5000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCy=PosCy+1;
 8003062:	3301      	adds	r3, #1

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 8003064:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003068:	2100      	movs	r1, #0
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 5000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 5000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1500);
				PosCy=PosCy+1;
 800306a:	602b      	str	r3, [r5, #0]

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 800306c:	f7fe ffd0 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8003070:	f640 2098 	movw	r0, #2712	; 0xa98
 8003074:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003078:	2100      	movs	r1, #0
 800307a:	f7fe ffc9 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 800307e:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8003082:	4658      	mov	r0, fp

				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 8003084:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 8003086:	f7fe ff23 	bl	8001ed0 <chThdSleep>
			
				s=true;	
 800308a:	9e03      	ldr	r6, [sp, #12]
 800308c:	2301      	movs	r3, #1
 800308e:	7033      	strb	r3, [r6, #0]
 8003090:	e62c      	b.n	8002cec <main+0xbec>
		if(PosCy != PosFy){
			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){
				
				if((PosCy+1) == PosFy){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f241 7670 	movw	r6, #6000	; 0x1770
 8003098:	fb06 f303 	mul.w	r3, r6, r3
 800309c:	fba9 0103 	umull	r0, r1, r9, r3
 80030a0:	f640 207c 	movw	r0, #2684	; 0xa7c
 80030a4:	0b49      	lsrs	r1, r1, #13
 80030a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030aa:	f7fe ffb1 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 80030ae:	f8dd b018 	ldr.w	fp, [sp, #24]
 80030b2:	f640 2098 	movw	r0, #2712	; 0xa98
 80030b6:	f8db 3008 	ldr.w	r3, [fp, #8]
 80030ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030be:	fb06 f303 	mul.w	r3, r6, r3
 80030c2:	fba9 2103 	umull	r2, r1, r9, r3
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 80030c6:	f44f 6600 	mov.w	r6, #2048	; 0x800
			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){
				
				if((PosCy+1) == PosFy){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 80030ca:	0b49      	lsrs	r1, r1, #13
				palSetPad(GPIOA,9);
 80030cc:	f44f 7800 	mov.w	r8, #512	; 0x200
			if ((palReadPad(GPIOA,0) == TRUE) || (palReadPad(GPIOA,1) == TRUE) ){
				
				if((PosCy+1) == PosFy){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 80030d0:	f7fe ff9e 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 80030d4:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1000);
 80030d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				if((PosCy+1) == PosFy){
				//Advance
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
 80030dc:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 80030de:	f7fe fef7 	bl	8001ed0 <chThdSleep>
				PosCy=PosCy+1;
 80030e2:	682b      	ldr	r3, [r5, #0]
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 80030e4:	f640 207c 	movw	r0, #2684	; 0xa7c
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1000);
				PosCy=PosCy+1;
 80030e8:	3301      	adds	r3, #1
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 80030ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80030ee:	2100      	movs	r1, #0
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);	
				chThdSleepMilliseconds(1000);
				PosCy=PosCy+1;
 80030f0:	602b      	str	r3, [r5, #0]
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 80030f2:	f7fe ff8d 	bl	8002010 <pwmEnableChannel.constprop.5>
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 80030f6:	f640 2098 	movw	r0, #2712	; 0xa98
 80030fa:	2100      	movs	r1, #0
 80030fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003100:	f7fe ff86 	bl	8002010 <pwmEnableChannel.constprop.5>
				palSetPad(GPIOA,9);
 8003104:	f8c4 8010 	str.w	r8, [r4, #16]
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
 8003108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				PosCy=PosCy+1;
				//Stop 
				pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
 800310c:	6126      	str	r6, [r4, #16]
				chThdSleepMilliseconds(1000);
 800310e:	f7fe fedf 	bl	8001ed0 <chThdSleep>
				
				s=false;
				}

				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
 8003112:	682a      	ldr	r2, [r5, #0]
 8003114:	f8da 3000 	ldr.w	r3, [sl]
 8003118:	1c51      	adds	r1, r2, #1
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
				
				s=false;
 800311a:	9e03      	ldr	r6, [sp, #12]
 800311c:	2000      	movs	r0, #0
				}

				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
 800311e:	4299      	cmp	r1, r3
				pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
				palSetPad(GPIOA,9);
				palSetPad(GPIOA,11);
				chThdSleepMilliseconds(1000);
				
				s=false;
 8003120:	7030      	strb	r0, [r6, #0]
				}

				if(((PosCy+1) != PosFy) && (PosCy != PosFy)){
 8003122:	f43f ae3c 	beq.w	8002d9e <main+0xc9e>
 8003126:	429a      	cmp	r2, r3
 8003128:	f47f adf9 	bne.w	8002d1e <main+0xc1e>
 800312c:	e637      	b.n	8002d9e <main+0xc9e>
				chThdSleepMilliseconds(1000);
				}

				if((PosCx>PosFx) && (PosCy==PosFy)){
							//Stop 
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 800312e:	f640 207c 	movw	r0, #2684	; 0xa7c
 8003132:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003136:	2100      	movs	r1, #0
 8003138:	f7fe ff6a 	bl	8002010 <pwmEnableChannel.constprop.5>
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800313c:	f640 2098 	movw	r0, #2712	; 0xa98
							palSetPad(GPIOA,9);
 8003140:	f44f 7b00 	mov.w	fp, #512	; 0x200
							palSetPad(GPIOA,11);
 8003144:	f44f 6800 	mov.w	r8, #2048	; 0x800
				}

				if((PosCx>PosFx) && (PosCy==PosFy)){
							//Stop 
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8003148:	2100      	movs	r1, #0
 800314a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800314e:	f7fe ff5f 	bl	8002010 <pwmEnableChannel.constprop.5>
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);
							chThdSleepMilliseconds(1000);
 8003152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

				if((PosCx>PosFx) && (PosCy==PosFy)){
							//Stop 
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
							palSetPad(GPIOA,9);
 8003156:	f8c4 b010 	str.w	fp, [r4, #16]
							palSetPad(GPIOA,11);
 800315a:	f8c4 8010 	str.w	r8, [r4, #16]
							chThdSleepMilliseconds(1000);
 800315e:	f7fe feb7 	bl	8001ed0 <chThdSleep>
							//Left
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003168:	fb03 f202 	mul.w	r2, r3, r2
 800316c:	fba9 0102 	umull	r0, r1, r9, r2
 8003170:	f640 207c 	movw	r0, #2684	; 0xa7c
 8003174:	0b49      	lsrs	r1, r1, #13
 8003176:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	f7fe ff48 	bl	8002010 <pwmEnableChannel.constprop.5>
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8003180:	f640 2098 	movw	r0, #2712	; 0xa98
 8003184:	2100      	movs	r1, #0
 8003186:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800318a:	f7fe ff41 	bl	8002010 <pwmEnableChannel.constprop.5>
							palSetPad(GPIOA,9);
 800318e:	f8c4 b010 	str.w	fp, [r4, #16]
							palSetPad(GPIOA,11);
							chThdSleepMilliseconds(550);
 8003192:	f240 2026 	movw	r0, #550	; 0x226
							chThdSleepMilliseconds(1000);
							//Left
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 1000)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);
 8003196:	f8c4 8010 	str.w	r8, [r4, #16]
							chThdSleepMilliseconds(550);
 800319a:	f7fe fe99 	bl	8001ed0 <chThdSleep>
							//Stop 
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
 800319e:	f640 207c 	movw	r0, #2684	; 0xa7c
 80031a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80031a6:	2100      	movs	r1, #0
 80031a8:	f7fe ff32 	bl	8002010 <pwmEnableChannel.constprop.5>
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 80031ac:	f640 2098 	movw	r0, #2712	; 0xa98
 80031b0:	2100      	movs	r1, #0
 80031b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80031b6:	f7fe ff2b 	bl	8002010 <pwmEnableChannel.constprop.5>
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);
							chThdSleepMilliseconds(1000);
 80031ba:	9b01      	ldr	r3, [sp, #4]
							palSetPad(GPIOA,11);
							chThdSleepMilliseconds(550);
							//Stop 
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
							palSetPad(GPIOA,9);
 80031bc:	f8c4 b010 	str.w	fp, [r4, #16]
							palSetPad(GPIOA,11);
							chThdSleepMilliseconds(1000);
 80031c0:	4618      	mov	r0, r3
							chThdSleepMilliseconds(550);
							//Stop 
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);
 80031c2:	f8c4 8010 	str.w	r8, [r4, #16]
							chThdSleepMilliseconds(1000);
 80031c6:	f7fe fe83 	bl	8001ed0 <chThdSleep>
							//Advance
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	f241 7270 	movw	r2, #6000	; 0x1770
 80031d0:	fb02 f101 	mul.w	r1, r2, r1
 80031d4:	fba9 0101 	umull	r0, r1, r9, r1
 80031d8:	f640 207c 	movw	r0, #2684	; 0xa7c
 80031dc:	0b49      	lsrs	r1, r1, #13
 80031de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80031e2:	9202      	str	r2, [sp, #8]
 80031e4:	f7fe ff14 	bl	8002010 <pwmEnableChannel.constprop.5>
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
 80031e8:	9806      	ldr	r0, [sp, #24]
 80031ea:	9a02      	ldr	r2, [sp, #8]
 80031ec:	6881      	ldr	r1, [r0, #8]
 80031ee:	f640 2098 	movw	r0, #2712	; 0xa98
 80031f2:	fb02 f101 	mul.w	r1, r2, r1
 80031f6:	fba9 2101 	umull	r2, r1, r9, r1
 80031fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80031fe:	0b49      	lsrs	r1, r1, #13
 8003200:	f7fe ff06 	bl	8002010 <pwmEnableChannel.constprop.5>
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);	
							chThdSleepMilliseconds(1000);
 8003204:	9b01      	ldr	r3, [sp, #4]
							palSetPad(GPIOA,11);
							chThdSleepMilliseconds(1000);
							//Advance
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
							palSetPad(GPIOA,9);
 8003206:	f8c4 b010 	str.w	fp, [r4, #16]
							palSetPad(GPIOA,11);	
							chThdSleepMilliseconds(1000);
 800320a:	4618      	mov	r0, r3
							chThdSleepMilliseconds(1000);
							//Advance
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);	
 800320c:	f8c4 8010 	str.w	r8, [r4, #16]
							chThdSleepMilliseconds(1000);
 8003210:	f7fe fe5e 	bl	8001ed0 <chThdSleep>
							PosCx=PosCx-1;
 8003214:	6833      	ldr	r3, [r6, #0]
							s=false;
 8003216:	2200      	movs	r2, #0
							pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 6000)); 
							pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 6000));
							palSetPad(GPIOA,9);
							palSetPad(GPIOA,11);	
							chThdSleepMilliseconds(1000);
							PosCx=PosCx-1;
 8003218:	3b01      	subs	r3, #1
 800321a:	6033      	str	r3, [r6, #0]
							s=false;
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e5cd      	b.n	8002dbe <main+0xcbe>
	palWritePad(GPIOA,3,0);
	palWritePad(GPIOA,4,1);
		if (palReadPad(GPIOA,5) == TRUE){
			table=7;}
		if (palReadPad(GPIOA,6) == TRUE){
			table=8;}
 8003222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003224:	2108      	movs	r1, #8
	palWritePad(GPIOA,4,0);
 8003226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	palWritePad(GPIOA,3,0);
	palWritePad(GPIOA,4,1);
		if (palReadPad(GPIOA,5) == TRUE){
			table=7;}
		if (palReadPad(GPIOA,6) == TRUE){
			table=8;}
 800322a:	6019      	str	r1, [r3, #0]
	palWritePad(GPIOA,4,0);
 800322c:	6122      	str	r2, [r4, #16]
			PosFx=2;
			PosFy=6;
		break;

		case 8:
			PosFx=4;
 800322e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003232:	2104      	movs	r1, #4
			PosFy=6;
 8003234:	2206      	movs	r2, #6
			PosFx=2;
			PosFy=6;
		break;

		case 8:
			PosFx=4;
 8003236:	f8cb 1000 	str.w	r1, [fp]
			PosFy=6;
 800323a:	f8c8 2000 	str.w	r2, [r8]
 800323e:	46c3      	mov	fp, r8
 8003240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003244:	f7ff ba8a 	b.w	800275c <main+0x65c>
 8003248:	f3af 8000 	nop.w
 800324c:	f3af 8000 	nop.w
